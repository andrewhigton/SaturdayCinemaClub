{"ast":null,"code":"import _slicedToArray from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/carousel/Carousel.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ImageSlide from './ImageSlide';\nimport Arrow from './Arrow';\nimport '../../App1.css';\n\nconst Carousel = ({\n  films: {\n    film\n  }\n}) => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentImageIndex = _useState2[0],\n        setImageIndex = _useState2[1];\n\n  console.log(currentImageIndex);\n  useInterval(() => {\n    setImageIndex(currentImageIndex + 1);\n  }, 1000); // return <h1>{count}</h1>;\n\n  function useInterval(callback, delay) {\n    const savedCallback = useRef();\n    useEffect(() => {\n      savedCallback.current = callback;\n    });\n    useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }, [delay]);\n  } //works once\n  // useEffect(() => {\n  //   const timeout = setTimeout(() => {\n  //     setImageIndex(currentImageIndex + 1);\n  //   }, 500);\n  //   return () => clearTimeout(timeout);\n  // }, [currentImageIndex]);\n  // useEffect(() => {\n  // setImageIndex(0);\n  // }, [setImageIndex]);\n  // useEffect(() => {\n  //          let timer1 = setTimeout(() => setImageIndex(1), 2000)\n  //          // this will clear Timeout when component unmont like in willComponentUnmount\n  //          return () => {\n  //            clearTimeout(timer1)\n  //          }\n  //        },[] //useEffect will run only one time\n  // //if you pass a value to array, like this [data] than clearTimeout will run every time this value changes (useEffect re-run)\n  //      )\n  // useEffect(() => {\n  // nextSlide ();\n  // }, [nextSlide]);\n\n\n  function previousSlide() {\n    console.log('prev');\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === 0;\n    const index = shouldResetIndex ? lastIndex : currentImageIndex - 1;\n    setImageIndex(index);\n  }\n\n  function nextSlide() {\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === lastIndex;\n    const index = shouldResetIndex ? 0 : currentImageIndex + 1;\n    setImageIndex(index);\n  }\n\n  if (film === null) return null;\n  return React.createElement(\"div\", {\n    className: \"carousel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(ImageSlide, {\n    url: film[0].image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"arrows\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Arrow, {\n    direction: \"left\",\n    clickFunction: previousSlide,\n    glyph: \"\\u25C0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(Arrow, {\n    direction: \"right\",\n    clickFunction: nextSlide,\n    glyph: \"\\u25B6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })));\n};\n\nCarousel.propTypes = {\n  films: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  films: state.film\n});\n\nexport default connect(mapStateToProps)(Carousel);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/carousel/Carousel.js"],"names":["React","useState","useEffect","useRef","PropTypes","connect","ImageSlide","Arrow","Carousel","films","film","currentImageIndex","setImageIndex","console","log","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval","previousSlide","lastIndex","length","shouldResetIndex","index","nextSlide","image","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ImageSlide from './ImageSlide';\nimport Arrow from './Arrow'; \nimport '../../App1.css';\n\nconst Carousel = ({ films: \n\t{ film } \n\t}) => {\n\t\n\tconst [ currentImageIndex, setImageIndex ] = useState();\n\t\n\tconsole.log(currentImageIndex)\n\n\nuseInterval(() => {\n    setImageIndex(currentImageIndex + 1);\n  }, 1000);\n\n  // return <h1>{count}</h1>;\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n//works once\n// useEffect(() => {\n//   const timeout = setTimeout(() => {\n//     setImageIndex(currentImageIndex + 1);\n//   }, 500);\n//   return () => clearTimeout(timeout);\n// }, [currentImageIndex]);\n\t\n\t// useEffect(() => {\n\t// setImageIndex(0);\n\t// }, [setImageIndex]);\n\n\t// useEffect(() => {\n //          let timer1 = setTimeout(() => setImageIndex(1), 2000)\n //          // this will clear Timeout when component unmont like in willComponentUnmount\n //          return () => {\n //            clearTimeout(timer1)\n //          }\n //        },[] //useEffect will run only one time\n // //if you pass a value to array, like this [data] than clearTimeout will run every time this value changes (useEffect re-run)\n //      )\n\n\n\t// useEffect(() => {\n\t// nextSlide ();\n\t// }, [nextSlide]);\n\n\tfunction previousSlide () {\n\tconsole.log('prev')\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === 0;\n    const index =  shouldResetIndex ? lastIndex : currentImageIndex - 1;\n    setImageIndex(index)\t\n\t\t}\n\t\n  \tfunction nextSlide () {\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === lastIndex;\n    const index =  shouldResetIndex ? 0 : currentImageIndex + 1;\n\tsetImageIndex(index)\n  \t\t}\n\n  \t\tif (film === null) return null;\n    return (\n\n      <div className=\"carousel\">\n      \t\n      \t<ImageSlide url={ film[0].image } />     \n      \t<div className=\"arrows\">\n      \t<Arrow\n          direction=\"left\"\n          clickFunction={ previousSlide } \n          glyph=\"&#9664;\" \n         />\n        <Arrow\n          direction=\"right\"\n          clickFunction={ nextSlide }\n          glyph=\"&#9654;\" \n         />\n      \t</div>   \n      </div>\n    );\n}\n\nCarousel.propTypes = {\n\tfilms: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n\tfilms: state.film\n});\n\nexport default connect(mapStateToProps)(Carousel);"]},"metadata":{},"sourceType":"module"}