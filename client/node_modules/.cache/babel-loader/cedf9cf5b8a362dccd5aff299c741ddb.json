{"ast":null,"code":"import _slicedToArray from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/stripe-button/stripe-button.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport StripeCheckout from 'react-stripe-checkout'; //import { Redirect } from 'react-router-dom';\n\nimport { updateFilm } from '../../actions/film';\nimport { updateUserTickets } from '../../actions/auth';\nimport axios from 'axios'; //next \n// 2 now, how to update the film when booking complete\n// 3 sort out this fucking component update \n\nconst StripeCheckoutButton = ({\n  price,\n  filmData,\n  ticketData,\n  history\n}) => {\n  // console.log(filmData)\n  // console.log(ticketData)\n  let _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ticket = _useState2[0],\n      setTicket = _useState2[1];\n\n  console.log(ticket);\n  const priceForStripe = price * 100;\n  const publishableKey = 'pk_test_GxoLwpaJRAn1kdTQGlL8EwZa00qqtVHbM3';\n\n  const onToken = token => {\n    axios({\n      url: 'payment',\n      method: 'post',\n      data: {\n        amount: priceForStripe,\n        token\n      }\n    }).then(response => {\n      alert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\n      window.location.replace('http://localhost:3000/film/');\n      setTicket(true);\n    }).catch(error => {\n      console.log('Payment error: ', JSON.parse(error));\n      alert('Payment error. Please use the provided credit card details');\n    });\n  };\n\n  useEffect(() => {\n    // if(ticket) {\n    updateFilm(filmData, history);\n    updateUserTickets(ticketData, history); // };\n  }, [updateFilm, updateUserTickets]); // const onSubmit = e => {\n  // \te.preventDefault();\n  // \tcreateFilm(formData, history);\n  // };\n\n  return React.createElement(\"div\", {\n    className: \"how-it-works\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(StripeCheckout, {\n    label: \"Pay now\",\n    name: \"Crown Clothing\",\n    billingAddress: true,\n    shippingAddress: true,\n    image: \"https://sendeyo.com/up/d/f3eb2117da\",\n    description: `Your total is £{price}`,\n    amount: priceForStripe // amount={priceForStripe}\n    ,\n    panelLabel: \"Pay now\",\n    token: onToken,\n    stripeKey: publishableKey,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n}; // export default StripeCheckoutButton;\n\n\nconst mapStateToProps = state => ({\n  film: state.film,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  updateFilm,\n  updateUserTickets\n})(withRouter(StripeCheckoutButton)); // const priceForStripe = price * 100;\n// \tconst publishableKey = 'pk_test_uccgS5cz3BgmQJF5Jpfi3zhe';\n// \tconst onToken = token => {\n// \t\tconsole.log(token);\n// \t\talert('Payment succesful');\n// \t}\n// <StripeCheckout\n// \t\tlabel='Pay Now'\n// \t\tname='Crown Clothing'\n// \t\tbillingAddress\n// \t\tshippingAddress\n// \t\timage='https://sendeyo.com/up/d/f3eb2117da'\n// \t\tdescription={`Your total is ${price}`}\n// \t\tamount={priceForStripe}\n// \t\tpanelLabel='Pay now'\n// \t\ttoken={onToken}\n// \t\tstripeKey={publishableKey}\n// \t\t/>","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/stripe-button/stripe-button.js"],"names":["React","useEffect","useState","connect","withRouter","StripeCheckout","updateFilm","updateUserTickets","axios","StripeCheckoutButton","price","filmData","ticketData","history","ticket","setTicket","console","log","priceForStripe","publishableKey","onToken","token","url","method","data","amount","then","response","alert","window","location","replace","catch","error","JSON","parse","mapStateToProps","state","film","auth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport StripeCheckout from 'react-stripe-checkout';\n//import { Redirect } from 'react-router-dom';\nimport { updateFilm } from '../../actions/film';\nimport { updateUserTickets } from '../../actions/auth';\nimport axios from 'axios';\n\n//next \n// 2 now, how to update the film when booking complete\n// 3 sort out this fucking component update \n\nconst StripeCheckoutButton = ({ price, filmData, ticketData, history }) => {\n\t// console.log(filmData)\n\t// console.log(ticketData)\n\tlet [ticket, setTicket] = useState(false);\n\tconsole.log(ticket)\n\tconst priceForStripe = price * 100;\n\t\t\tconst publishableKey = 'pk_test_GxoLwpaJRAn1kdTQGlL8EwZa00qqtVHbM3';\n\t\t\tconst onToken = token => {\n\t\t\t\n\t\t\taxios({ \n\t\t\t\turl: 'payment', \n\t\t\t\tmethod: 'post',\n\t\t\t\tdata: {\n\t\t\t\t\tamount: priceForStripe,\n\t\t\t\t\ttoken\n\t\t\t\t}\n\t\t\t })\n\t\t\t.then(response => {\n\t\t\t \talert('Payment succesful. We have sent your tickets to your email address and will notify when the film has been booked');\t\n\t\t\t \twindow.location.replace('http://localhost:3000/film/');\n\t\t\t \tsetTicket(true)\n\t\t\t })\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log('Payment error: ', JSON.parse(error)); \t\n\t\t\t \talert('Payment error. Please use the provided credit card details');\t\n\t\t\t }) \n\t} \n\n\tuseEffect(() => {\n\t// if(ticket) {\n\tupdateFilm(filmData, history);\n    updateUserTickets(ticketData, history);\n\t// };\n},[updateFilm, updateUserTickets])\n\t// const onSubmit = e => {\n\t// \te.preventDefault();\n\t// \tcreateFilm(formData, history);\n\t// };\n\n\treturn (\n\t\t<div className='how-it-works'>\n\t\n\n\t\t<StripeCheckout\n\t\tlabel='Pay now'\n\t\tname='Crown Clothing'\n\t\tbillingAddress\n\t\tshippingAddress\n\t\timage='https://sendeyo.com/up/d/f3eb2117da'\n\t\tdescription={`Your total is £{price}`}\n\t\tamount={priceForStripe}\n\t\t// amount={priceForStripe}\n\t\tpanelLabel='Pay now'\n\t\ttoken={onToken}\n\t\tstripeKey={publishableKey}\n\t\t\n\t\t/>\n\t\t</div>\n\t\t)\n\t}\n\n// export default StripeCheckoutButton;\nconst mapStateToProps = state => ({\n  film: state.film,\n  auth: state.auth\n});\n\n\nexport default connect(mapStateToProps, { \n  updateFilm, \n  updateUserTickets \n})(withRouter(StripeCheckoutButton));\n\n// const priceForStripe = price * 100;\n// \tconst publishableKey = 'pk_test_uccgS5cz3BgmQJF5Jpfi3zhe';\n// \tconst onToken = token => {\n// \t\tconsole.log(token);\n// \t\talert('Payment succesful');\n// \t}\n// <StripeCheckout\n// \t\tlabel='Pay Now'\n// \t\tname='Crown Clothing'\n// \t\tbillingAddress\n// \t\tshippingAddress\n// \t\timage='https://sendeyo.com/up/d/f3eb2117da'\n// \t\tdescription={`Your total is ${price}`}\n// \t\tamount={priceForStripe}\n// \t\tpanelLabel='Pay now'\n// \t\ttoken={onToken}\n// \t\tstripeKey={publishableKey}\n// \t\t/>"]},"metadata":{},"sourceType":"module"}