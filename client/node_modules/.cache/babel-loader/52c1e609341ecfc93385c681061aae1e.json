{"ast":null,"code":"import _objectSpread from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/checkout-film/Checkout-Film.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button';\nimport PropTypes from 'prop-types';\nimport { getFilmById, updateFilm } from '../../actions/film';\nimport { updateProfileTickets } from '../../actions/profile'; //import { UPDATE_FILM } from '../../actions/types';\n//import './checkout-item.styles.scss';\n\nconst CheckoutFilm = ({\n  film: {\n    film,\n    loading\n  },\n  match,\n  getFilmById,\n  updateFilm,\n  updateProfileTickets,\n  history\n}) => {\n  const _useState = useState({\n    _id: film._id,\n    user: film.user,\n    title: film.title,\n    date: film.date,\n    cinema: film.cinema,\n    image: film.image,\n    ticketPrice: film.ticketPrice,\n    crowdfundTarget: film.crowdfundTarget,\n    totalsoFar: film.totalsoFar\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        filmData = _useState2[0],\n        setFilmData = _useState2[1];\n\n  let _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      bookingTotal = _useState4[0],\n      setBookingTotal = _useState4[1];\n\n  let tickets = 0;\n  let ticketsTotal = film.totalsoFar; // let ticketsTotalCost;\n  // const onChange = e => {\n  //   //ticketsTotal += parseInt(e.target.value)\n  //   // setFormData({ ...formData, totalsoFar: ticketsTotal });\n  //   // setTicketData({...ticketData, totalsoFar: ticketsTotal })\n  //   // // setTicketData({...ticketData, cost: bookingTotal })\n  //   // // setTicketData({...ticketData, numberOfTickets: tickets })\n  // } \n\n  const _useState5 = useState({\n    title: film.title,\n    ticketPrice: film.ticketPrice,\n    date: film.date,\n    cinema: film.cinema,\n    crowdfundTarget: film.crowdfundTarget,\n    totalsoFar: film.totalsoFar,\n    numberOfTickets: tickets,\n    cost: bookingTotal\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        ticketData = _useState6[0],\n        setTicketData = _useState6[1]; // console.log(ticketData)\n  // console.log(bookingTotal)\n  //console.log(ticketsTotalCost)\n\n\n  console.log(ticketData); //how to sort this mess out? \n  //what do you need to set?\n  //when?\n  //   numberOfTickets first \n  // totalsoFar: film.totalsoFar,\n  //   cost: bookingTotal,\n  // const onTicketChange = e => {\n  //       setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n  //ticketsTotal += parseInt(e.target.value)\n  // setTicketData({...ticketData, totalsoFar: ticketsTotal })\n  //setTicketData({...ticketData, cost: bookingTotal })\n  //tickets = e.target.value;\n  //}    \n  //   setTicketData({...ticketData, totalsoFar: ticketsTotal }),\n  //   setTicketData({...ticketData, numberOfTickets: tickets }),\n\n  const onSubmit = e => {\n    e.preventDefault();\n    updateFilm(filmData, history); //updateProfileTickets(ticketData, history);\n\n    console.log(ticketData); //console.log(formData);\n    //updateProfile(ticketData, history);\n  };\n\n  const ticketsChanges = e => {\n    setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n    console.log(bookingTotal);\n    setTicketBookingCost(e);\n  };\n\n  const changes = e => {\n    ticketsTotal += parseInt(e.target.value); //setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n    //tyring to get this to work next\n    // ticketsTotalCost = 5;\n    //setFilmBookingCost(e);\n    // setFilmTicketNumber(e);\n\n    setTicketNumber(e);\n    setFilmTotalSoFar(e);\n    setTicketTotalSoFar(e); // onChange(e);\n    // onTicketChange(e);\n  }; //so this works on both\n  //then why does it not work on setTicketBookingCost\n\n\n  const setFilmTotalSoFar = e => {\n    setFilmData(_objectSpread({}, filmData, {\n      totalsoFar: ticketsTotal\n    })); //setTicketData({...ticketData, totalsoFar: ticketsTotal })\n  }; //works\n\n\n  const setTicketTotalSoFar = e => {\n    //setFilmData({ ...filmData, totalsoFar: ticketsTotal });\n    setTicketData(_objectSpread({}, ticketData, {\n      totalsoFar: ticketsTotal\n    }));\n  }; // const setFilmBookingCost = (e) => {\n  //   //setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n  //   setFilmData({ ...filmData, cost: bookingTotal })\n  // }\n  //nope\n\n\n  const setTicketBookingCost = e => {\n    //setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n    setTicketData(_objectSpread({}, ticketData, {\n      cost: '4'\n    }));\n  };\n\n  const setTicketNumber = e => {\n    setTicketData(_objectSpread({}, ticketData, {\n      numberOfTickets: parseInt(e.target.value)\n    }));\n  };\n\n  console.log(ticketData); //   const setFilmTicketNumber = (e) => {\n  //   setFilmData({...filmData, numberOfTickets: parseInt(e.target.value) })\n  // }  \n\n  if (film === null) return null;\n  return React.createElement(\"div\", {\n    className: \"film\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"checkout-page how-it-works\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"checkout-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Film: \", film.title)), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Date: \", film.date, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Price: \\xA3\", film.ticketPrice, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Crowdfunding Target: \", film.crowdfundTarget, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"Tickets sold: \", film.totalsoFar))))), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"number\",\n    placeholder: \"Enter number of tickets\",\n    name: \"tickets\",\n    onInput: e => ticketsChanges(e),\n    onChange: e => changes(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"Basket total: \\xA3\", bookingTotal)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Link, {\n    className: \"btn btn-light my-1\",\n    to: \"/dashboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"Go Back\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    onClick: e => onSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(StripeCheckoutButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  })))));\n};\n\nCheckoutFilm.propTypes = {\n  updateFilm: PropTypes.func.isRequired,\n  updateProfileTickets: PropTypes.func.isRequired,\n  // getCurrentProfile: PropTypes.func.isRequired,\n  getFilmById: PropTypes.func.isRequired //  film: PropTypes.object.isRequired,\n  //profile: PropTypes.object.isRequired\n\n};\n\nconst mapStateToProps = state => ({\n  //profile: state.profile,\n  film: state.film\n});\n\nexport default connect(mapStateToProps, {\n  getFilmById,\n  updateFilm,\n  updateProfileTickets\n})(withRouter(CheckoutFilm));","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/checkout-film/Checkout-Film.js"],"names":["React","useEffect","useState","Fragment","connect","useParams","useSelector","useDispatch","Link","withRouter","Redirect","StripeCheckoutButton","PropTypes","getFilmById","updateFilm","updateProfileTickets","CheckoutFilm","film","loading","match","history","_id","user","title","date","cinema","image","ticketPrice","crowdfundTarget","totalsoFar","filmData","setFilmData","bookingTotal","setBookingTotal","tickets","ticketsTotal","numberOfTickets","cost","ticketData","setTicketData","console","log","onSubmit","e","preventDefault","ticketsChanges","parseInt","target","value","setTicketBookingCost","changes","setTicketNumber","setFilmTotalSoFar","setTicketTotalSoFar","propTypes","func","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { useParams} from 'react-router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button';\nimport PropTypes from 'prop-types';\nimport { getFilmById, updateFilm } from '../../actions/film';\nimport { updateProfileTickets } from '../../actions/profile';\n//import { UPDATE_FILM } from '../../actions/types';\n//import './checkout-item.styles.scss';\n\nconst CheckoutFilm = ({ \n  film: {film, loading}, \n  match, \n  getFilmById, \n  updateFilm, \n  updateProfileTickets,\n  history }) => {\n\n  const [filmData, setFilmData] = useState({\n    _id: film._id,\n    user: film.user,\n    title: film.title,\n    date: film.date,\n    cinema: film.cinema,\n    image: film.image,\n    ticketPrice: film.ticketPrice,\n    crowdfundTarget: film.crowdfundTarget,\n    totalsoFar: film.totalsoFar\n  });\n\n  let [bookingTotal, setBookingTotal] = useState(0);\n\n  let tickets = 0;\n  let ticketsTotal = film.totalsoFar; \n  // let ticketsTotalCost;\n \n  // const onChange = e => {\n  //   //ticketsTotal += parseInt(e.target.value)\n  //   // setFormData({ ...formData, totalsoFar: ticketsTotal });\n  //   // setTicketData({...ticketData, totalsoFar: ticketsTotal })\n  //   // // setTicketData({...ticketData, cost: bookingTotal })\n  //   // // setTicketData({...ticketData, numberOfTickets: tickets })\n  // } \n  const [ticketData, setTicketData] = useState({\n    title: film.title,\n    ticketPrice: film.ticketPrice,\n    date: film.date,\n    cinema: film.cinema,\n    crowdfundTarget: film.crowdfundTarget,\n    totalsoFar: film.totalsoFar,\n    numberOfTickets: tickets,\n    cost: bookingTotal\n  });\n  // console.log(ticketData)\n  // console.log(bookingTotal)\n  //console.log(ticketsTotalCost)\n  console.log(ticketData);\n\n\n\n  //how to sort this mess out? \n  //what do you need to set?\n  //when?\n//   numberOfTickets first \n  // totalsoFar: film.totalsoFar,\n  //   cost: bookingTotal,\n  // const onTicketChange = e => {\n  //       setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n        //ticketsTotal += parseInt(e.target.value)\n        // setTicketData({...ticketData, totalsoFar: ticketsTotal })\n        //setTicketData({...ticketData, cost: bookingTotal })\n        //tickets = e.target.value;\n  //}    \n  //   setTicketData({...ticketData, totalsoFar: ticketsTotal }),\n  //   setTicketData({...ticketData, numberOfTickets: tickets }),\n\n    \n  const onSubmit = (e) => {\n    e.preventDefault();\n    updateFilm(filmData, history);\n    //updateProfileTickets(ticketData, history);\n    console.log(ticketData);\n    //console.log(formData);\n    //updateProfile(ticketData, history);\n  };\n\n   const ticketsChanges = (e) => {\n    setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value))\n    console.log(bookingTotal)\n    setTicketBookingCost(e);\n   } \n\n    const changes = (e) => {\n\n    ticketsTotal += parseInt(e.target.value);\n    //setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n    //tyring to get this to work next\n    // ticketsTotalCost = 5;\n    //setFilmBookingCost(e);\n    \n    // setFilmTicketNumber(e);\n    setTicketNumber(e);\n    setFilmTotalSoFar(e);\n    setTicketTotalSoFar(e);\n    \n    // onChange(e);\n    // onTicketChange(e);\n  }\n  //so this works on both\n  //then why does it not work on setTicketBookingCost\n  const setFilmTotalSoFar = (e) => {\n    setFilmData({ ...filmData, totalsoFar: ticketsTotal });\n    //setTicketData({...ticketData, totalsoFar: ticketsTotal })\n  }\n  //works\n  const setTicketTotalSoFar = (e) => {\n    //setFilmData({ ...filmData, totalsoFar: ticketsTotal });\n    setTicketData({...ticketData, totalsoFar: ticketsTotal })\n  } \n\n  // const setFilmBookingCost = (e) => {\n  //   //setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n  //   setFilmData({ ...filmData, cost: bookingTotal })\n  // }\n  //nope\n  const setTicketBookingCost = (e) => {\n    //setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n    setTicketData({ ...ticketData, cost: '4' })\n  }\n\n  const setTicketNumber = (e) => {\n    setTicketData({...ticketData, numberOfTickets: parseInt(e.target.value) })\n  }\n  console.log(ticketData);\n  //   const setFilmTicketNumber = (e) => {\n  //   setFilmData({...filmData, numberOfTickets: parseInt(e.target.value) })\n  // }  \n\n  if (film === null) return null;\n  return (\n    <div className=\"film\">\n    <div>\n      <form>\n      <div className='checkout-page how-it-works'>\n        <div className='checkout-header'>\n          <div className='header-block'>\n\n            <span>Film: {film.title}</span>\n          </div>\n          \n          <div className='header-block'>\n            <span>Date: {film.date} </span>\n          </div>\n          \n          <div className='header-block'>\n            <span>Price: £{film.ticketPrice} </span>\n          </div>\n          \n          <div className='header-block'>\n            <span>Crowdfunding Target: {film.crowdfundTarget} </span>\n          </div>\n          <div \n          className='header-block'>\n            <span>Tickets sold: {film.totalsoFar}</span>\n          </div>\n        </div>\n        </div>\n        </form>\n      \n\n          <div className='header-block'>\n            <input\n              type='number'\n              placeholder='Enter number of tickets'\n              name='tickets'\n              onInput={e => ticketsChanges(e)}\n              onChange={e => changes(e)}\n            />\n          </div>\n          <div className='header-block'>\n            <span>Basket total: £{bookingTotal}</span>\n          </div>\n          <div>\n          <Link className='btn btn-light my-1' to='/dashboard'>Go Back\n          </Link>\n          </div>\n          <div>\n            <span onClick={e => onSubmit(e)}> \n              <StripeCheckoutButton />\n            </span>\n          </div>\n        </div>\n      </div>\n  )\n}\n\nCheckoutFilm.propTypes = {\n  updateFilm: PropTypes.func.isRequired,\n  updateProfileTickets: PropTypes.func.isRequired,\n  // getCurrentProfile: PropTypes.func.isRequired,\n  getFilmById: PropTypes.func.isRequired,\n  //  film: PropTypes.object.isRequired,\n  //profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  //profile: state.profile,\n  film: state.film\n});\n\nexport default connect(mapStateToProps, { \n  getFilmById, \n  updateFilm, \n  updateProfileTickets \n})(withRouter(CheckoutFilm));"]},"metadata":{},"sourceType":"module"}