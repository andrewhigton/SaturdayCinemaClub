{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/dashboard/Dashboard.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Film from '../films/Film';\nimport PropTypes from 'prop-types';\nimport Spinner from '../layout/spinner';\nimport { connect } from 'react-redux';\nimport DashboardActions from './DashboardActions';\nimport { getCurrentProfile } from '../../actions/profile';\n\nconst Dashboard = ({\n  getCurrentProfile,\n  auth: {\n    user\n  },\n  films: {\n    film,\n    loading\n  },\n  profile: {\n    profile\n  }\n}) => {\n  //starts here\n  useEffect(() => {\n    getCurrentProfile();\n  }, [getCurrentProfile]); //use localstatestorage here? \n\n  if (film === null) return null;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Your movies\"), React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), \" Welcome \", user && user.name)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, film.map(item => item.user_id === user.id ? React.createElement(\"div\", {\n    className: \"film\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Film, {\n    film: item,\n    key: item._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    className: \"no-profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"You have not yet created a film\"), React.createElement(Link, {\n    to: \"/create-film\",\n    className: \"btn btn-primary my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Create movie\")))));\n};\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  //deleteAccount: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired,\n  films: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile,\n  films: state.film\n});\n\nexport default connect(mapStateToProps, {\n  getCurrentProfile\n})(Dashboard); // <p>{console.log(profile.title)}</p>\n// <p>{console.log(profile.date)}</p>\n// loading && film === null ? <Spinner /> : \n//next - emulate profile in devconnect\n//you have to build in the films component here\n//then you have to map through the films to check if linked to user\n//note - the other way of doing this is to embed films in users, \n//then loop through the users and collect all the films","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/dashboard/Dashboard.js"],"names":["React","Fragment","useEffect","Link","Film","PropTypes","Spinner","connect","DashboardActions","getCurrentProfile","Dashboard","auth","user","films","film","loading","profile","name","map","item","user_id","id","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Film from '../films/Film';\nimport PropTypes from 'prop-types';\nimport Spinner from '../layout/spinner';\nimport { connect } from 'react-redux';\nimport DashboardActions from './DashboardActions';\nimport { getCurrentProfile } from '../../actions/profile';\n\nconst Dashboard = ({ \n  getCurrentProfile, \n  auth: { user }, \n  films: {film, loading}, \n  profile: { profile } \n  }) => {//starts here\n\tuseEffect(() => {\n\t\tgetCurrentProfile();\n\t}, [getCurrentProfile]);\n  //use localstatestorage here? \n\n\tif (film === null) return null;\n  return (\n        <Fragment>\n        <div>\n        <h1 className='large text-primary'>Your movies</h1>\n        <p className='lead'>\n          <i className='fas fa-user' /> Welcome {user && user.name}\n        </p>\n        </div>\n          \n              <div>{film.map(item => (\n                  item.user_id === user.id ? \n                  <div className=\"film\">\n                    <Film\n                      film={item}\n                      key={item._id}\n                    />\n                  </div>\n                 :           \n                <div className=\"no-profile\">\n                  <p>You have not yet created a film</p>\n                  <Link to='/create-film' className='btn btn-primary my-1'>\n                    Create movie\n                  </Link>\n                </div>    \n                \n              ))}\n              </div>    \n        </Fragment>\n      );\n    };\n\n Dashboard.propTypes = {\n\tgetCurrentProfile: PropTypes.func.isRequired,\n\t//deleteAccount: PropTypes.func.isRequired,\n\tauth: PropTypes.object.isRequired,\n\tprofile: PropTypes.object.isRequired,\n  films: PropTypes.object.isRequired\n};  \n\nconst mapStateToProps = state => ({\n\tauth: state.auth,\n\tprofile: state.profile,\n  films: state.film\n});\n\nexport default connect(mapStateToProps, { getCurrentProfile })(Dashboard);          \n          // <p>{console.log(profile.title)}</p>\n          // <p>{console.log(profile.date)}</p>\n          \n          // loading && film === null ? <Spinner /> : \n          //next - emulate profile in devconnect\n          //you have to build in the films component here\n          //then you have to map through the films to check if linked to user\n          //note - the other way of doing this is to embed films in users, \n          //then loop through the users and collect all the films "]},"metadata":{},"sourceType":"module"}