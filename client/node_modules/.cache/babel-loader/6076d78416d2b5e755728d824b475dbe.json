{"ast":null,"code":"import _slicedToArray from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/carousel/Carousel.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ImageSlide from './ImageSlide';\nimport Arrow from './Arrow';\nimport '../../App1.css';\n\nconst Carousel = ({\n  films: {\n    film\n  }\n}) => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentImageIndex = _useState2[0],\n        setImageIndex = _useState2[1]; //console.log(currentImageIndex)\n\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setCount(count + 1);\n    }, 500);\n    return () => clearTimeout(timeout);\n  }, [count]); // useEffect(() => {\n  // setImageIndex(0);\n  // }, [setImageIndex]);\n  // useEffect(() => {\n  //          let timer1 = setTimeout(() => setImageIndex(1), 2000)\n  //          // this will clear Timeout when component unmont like in willComponentUnmount\n  //          return () => {\n  //            clearTimeout(timer1)\n  //          }\n  //        },[] //useEffect will run only one time\n  // //if you pass a value to array, like this [data] than clearTimeout will run every time this value changes (useEffect re-run)\n  //      )\n  // useEffect(() => {\n  // nextSlide ();\n  // }, [nextSlide]);\n\n  function previousSlide() {\n    console.log('prev');\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === 0;\n    const index = shouldResetIndex ? lastIndex : currentImageIndex - 1;\n    setImageIndex(index);\n  }\n\n  function nextSlide() {\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === lastIndex;\n    const index = shouldResetIndex ? 0 : currentImageIndex + 1;\n    setImageIndex(index);\n  }\n\n  if (film === null) return null;\n  return React.createElement(\"div\", {\n    className: \"carousel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(ImageSlide, {\n    url: film[currentImageIndex].image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"arrows\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Arrow, {\n    direction: \"left\",\n    clickFunction: previousSlide,\n    glyph: \"\\u25C0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(Arrow, {\n    direction: \"right\",\n    clickFunction: nextSlide,\n    glyph: \"\\u25B6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })));\n};\n\nCarousel.propTypes = {\n  films: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  films: state.film\n});\n\nexport default connect(mapStateToProps)(Carousel);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/carousel/Carousel.js"],"names":["React","useState","useEffect","PropTypes","connect","ImageSlide","Arrow","Carousel","films","film","currentImageIndex","setImageIndex","timeout","setTimeout","setCount","count","clearTimeout","previousSlide","console","log","lastIndex","length","shouldResetIndex","index","nextSlide","image","propTypes","object","isRequired","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,gBAAP;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAK,EACxB;AAAEC,IAAAA;AAAF;AADiB,CAAD,KAEV;AAAA,oBAEuCR,QAAQ,EAF/C;AAAA;AAAA,QAEES,iBAFF;AAAA,QAEqBC,aAFrB,kBAIN;;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BC,MAAAA,QAAQ,CAACC,KAAK,GAAG,CAAT,CAAR;AACD,KAFyB,EAEvB,GAFuB,CAA1B;AAGA,WAAO,MAAMC,YAAY,CAACJ,OAAD,CAAzB;AACD,GALQ,EAKN,CAACG,KAAD,CALM,CAAT,CANO,CAaN;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;AAEA,WAASE,aAAT,GAA0B;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACG,UAAMC,SAAS,GAAGX,IAAI,CAACY,MAAL,GAAc,CAAhC;AACA,UAAMC,gBAAgB,GAAGZ,iBAAiB,KAAK,CAA/C;AACA,UAAMa,KAAK,GAAID,gBAAgB,GAAGF,SAAH,GAAeV,iBAAiB,GAAG,CAAlE;AACAC,IAAAA,aAAa,CAACY,KAAD,CAAb;AACD;;AAEA,WAASC,SAAT,GAAsB;AACrB,UAAMJ,SAAS,GAAGX,IAAI,CAACY,MAAL,GAAc,CAAhC;AACA,UAAMC,gBAAgB,GAAGZ,iBAAiB,KAAKU,SAA/C;AACA,UAAMG,KAAK,GAAID,gBAAgB,GAAG,CAAH,GAAOZ,iBAAiB,GAAG,CAA1D;AACHC,IAAAA,aAAa,CAACY,KAAD,CAAb;AACI;;AAED,MAAId,IAAI,KAAK,IAAb,EAAmB,OAAO,IAAP;AACnB,SAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEC,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAGA,IAAI,CAACC,iBAAD,CAAJ,CAAwBe,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAGC;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,KAAD;AACG,IAAA,SAAS,EAAC,MADb;AAEG,IAAA,aAAa,EAAGR,aAFnB;AAGG,IAAA,KAAK,EAAC,QAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAMC,oBAAC,KAAD;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,aAAa,EAAGO,SAFlB;AAGE,IAAA,KAAK,EAAC,QAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAND,CAHD,CAFF;AAmBH,CArED;;AAuEAjB,QAAQ,CAACmB,SAAT,GAAqB;AACpBlB,EAAAA,KAAK,EAAEL,SAAS,CAACwB,MAAV,CAAiBC;AADJ,CAArB;;AAIA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCtB,EAAAA,KAAK,EAAEsB,KAAK,CAACrB;AADoB,CAAL,CAA7B;;AAIA,eAAeL,OAAO,CAACyB,eAAD,CAAP,CAAyBtB,QAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ImageSlide from './ImageSlide';\nimport Arrow from './Arrow'; \nimport '../../App1.css';\n\nconst Carousel = ({ films: \n\t{ film } \n\t}) => {\n\t\n\tconst [ currentImageIndex, setImageIndex ] = useState();\n\t\n\t//console.log(currentImageIndex)\n\nuseEffect(() => {\n  const timeout = setTimeout(() => {\n    setCount(count + 1);\n  }, 500);\n  return () => clearTimeout(timeout);\n}, [count]);\n\t\n\t// useEffect(() => {\n\t// setImageIndex(0);\n\t// }, [setImageIndex]);\n\n\t// useEffect(() => {\n //          let timer1 = setTimeout(() => setImageIndex(1), 2000)\n //          // this will clear Timeout when component unmont like in willComponentUnmount\n //          return () => {\n //            clearTimeout(timer1)\n //          }\n //        },[] //useEffect will run only one time\n // //if you pass a value to array, like this [data] than clearTimeout will run every time this value changes (useEffect re-run)\n //      )\n\n\n\t// useEffect(() => {\n\t// nextSlide ();\n\t// }, [nextSlide]);\n\n\tfunction previousSlide () {\n\tconsole.log('prev')\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === 0;\n    const index =  shouldResetIndex ? lastIndex : currentImageIndex - 1;\n    setImageIndex(index)\t\n\t\t}\n\t\n  \tfunction nextSlide () {\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === lastIndex;\n    const index =  shouldResetIndex ? 0 : currentImageIndex + 1;\n\tsetImageIndex(index)\n  \t\t}\n\n  \t\tif (film === null) return null;\n    return (\n\n      <div className=\"carousel\">\n      \t\n      \t<ImageSlide url={ film[currentImageIndex].image } />     \n      \t<div className=\"arrows\">\n      \t<Arrow\n          direction=\"left\"\n          clickFunction={ previousSlide } \n          glyph=\"&#9664;\" \n         />\n        <Arrow\n          direction=\"right\"\n          clickFunction={ nextSlide }\n          glyph=\"&#9654;\" \n         />\n      \t</div>   \n      </div>\n    );\n}\n\nCarousel.propTypes = {\n\tfilms: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n\tfilms: state.film\n});\n\nexport default connect(mapStateToProps)(Carousel);"]},"metadata":{},"sourceType":"module"}