{"ast":null,"code":"import _slicedToArray from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/carousel/Carousel.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ImageSlide from './ImageSlide';\nimport Arrow from './Arrow';\nimport '../../App1.css';\n\nconst Carousel = ({\n  films: {\n    film\n  }\n}) => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentImageIndex = _useState2[0],\n        setImageIndex = _useState2[1]; //console.log(currentImageIndex)\n\n\n  function Loading() {\n    const _useState3 = useState(false),\n          _useState4 = _slicedToArray(_useState3, 2),\n          showLoading = _useState4[0],\n          setShowLoading = _useState4[1];\n\n    useEffect(() => {\n      let timer1 = setTimeout(() => setShowLoading(true), 1000);\n      console.log('running'); // this will clear Timeout when component unmont like in willComponentUnmount\n\n      return () => {\n        clearTimeout(timer1);\n        Loading();\n      };\n    }, [currentImageIndex] //useEffect will run only one time\n    //if you pass a value to array, like this [data] than clearTimeout will run every time this value changes (useEffect re-run)   \n    );\n  } //works once\n  // useEffect(() => {\n  //   const timeout = setTimeout(() => {\n  //     setImageIndex(currentImageIndex + 1);\n  //   }, 500);\n  //   return () => clearTimeout(timeout);\n  // }, [currentImageIndex]);\n\n\n  useEffect(() => {\n    setImageIndex(0);\n  }, [setImageIndex]);\n\n  function previousSlide() {\n    console.log('prev');\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === 0;\n    const index = shouldResetIndex ? lastIndex : currentImageIndex - 1;\n    setImageIndex(index);\n  }\n\n  function nextSlide() {\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === lastIndex;\n    const index = shouldResetIndex ? 0 : currentImageIndex + 1;\n    setImageIndex(index);\n  }\n\n  if (film === null) return null;\n  return React.createElement(\"div\", {\n    className: \"carousel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(ImageSlide, {\n    url: film[currentImageIndex].image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"arrows\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Arrow, {\n    direction: \"left\",\n    clickFunction: previousSlide,\n    glyph: \"\\u25C0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Arrow, {\n    direction: \"right\",\n    clickFunction: nextSlide,\n    glyph: \"\\u25B6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })));\n};\n\nCarousel.propTypes = {\n  films: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  films: state.film\n});\n\nexport default connect(mapStateToProps)(Carousel);","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/carousel/Carousel.js"],"names":["React","useState","useEffect","useRef","PropTypes","connect","ImageSlide","Arrow","Carousel","films","film","currentImageIndex","setImageIndex","Loading","showLoading","setShowLoading","timer1","setTimeout","console","log","clearTimeout","previousSlide","lastIndex","length","shouldResetIndex","index","nextSlide","image","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ImageSlide from './ImageSlide';\nimport Arrow from './Arrow'; \nimport '../../App1.css';\n\nconst Carousel = ({ films: \n\t{ film } \n\t}) => {\n\t\n\tconst [ currentImageIndex, setImageIndex ] = useState();\n\t\n\t//console.log(currentImageIndex)\n\nfunction Loading() {   \n     const [showLoading, setShowLoading] = useState(false)\n     useEffect(() => {\n          let timer1 = setTimeout(() => setShowLoading(true), 1000)\n          console.log('running')\n          // this will clear Timeout when component unmont like in willComponentUnmount\n          return () => {\n            clearTimeout(timer1)\n          Loading()\n          }\n          \n        },\n        [currentImageIndex] //useEffect will run only one time\n           //if you pass a value to array, like this [data] than clearTimeout will run every time this value changes (useEffect re-run)   \n      )\n}\n//works once\n// useEffect(() => {\n//   const timeout = setTimeout(() => {\n//     setImageIndex(currentImageIndex + 1);\n//   }, 500);\n//   return () => clearTimeout(timeout);\n// }, [currentImageIndex]);\n\t\n\tuseEffect(() => {\n\tsetImageIndex(0);\n\t}, [setImageIndex]);\n\n\tfunction previousSlide () {\n\tconsole.log('prev')\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === 0;\n    const index =  shouldResetIndex ? lastIndex : currentImageIndex - 1;\n    setImageIndex(index)\t\n\t\t}\n\t\n  \tfunction nextSlide () {\n    const lastIndex = film.length - 1;\n    const shouldResetIndex = currentImageIndex === lastIndex;\n    const index =  shouldResetIndex ? 0 : currentImageIndex + 1;\n\tsetImageIndex(index)\n  \t\t}\n\n  \t\tif (film === null) return null;\n    return (\n\n      <div className=\"carousel\">\n      \t\n      \t<ImageSlide url={ film[currentImageIndex].image } />     \n\n      \t<div className=\"arrows\">\n      \t<Arrow\n          direction=\"left\"\n          clickFunction={ previousSlide } \n          glyph=\"&#9664;\" \n         />\n        <Arrow\n          direction=\"right\"\n          clickFunction={ nextSlide }\n          glyph=\"&#9654;\" \n         />\n      \t</div>   \n      </div>\n    );\n}\n\nCarousel.propTypes = {\n\tfilms: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n\tfilms: state.film\n});\n\nexport default connect(mapStateToProps)(Carousel);"]},"metadata":{},"sourceType":"module"}