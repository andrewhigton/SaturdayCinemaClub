{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_PROFILE, UPDATE_PROFILE, GET_PROFILES, PROFILE_ERROR, CLEAR_PROFILE, FILM_ERROR, GET_FILM, ACCOUNT_DELETED } from './types'; // Get current users profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    //in dev, this is profile/me\n    const res = await axios.get('/api/profile/me'); // console.log(res.data)\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const createProfile = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/profile', formData, config);\n    console.log(res);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const loadProfiles = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR //payload: { msg: err.response.statusText, status: err.response.status }\n\n    });\n  }\n}; // create film\n\nexport const createFilm = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //note - when it comes to finalisng this, get ride of profile, put it in film path\n\n    const res = await axios.post('/api/profile/create-film', formData, config);\n    dispatch({\n      type: GET_FILM,\n      payload: res.data\n    }); // dispatch(setAlert(edit ? 'Film updated' : 'Film created', 'success'));\n    // if(!edit) {\n    //   history.push('/dashboard');\n    // }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Tickets\n\nexport const updateUserTickets = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/api/profile/ticket', formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Tickets Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete experience\n\nexport const deleteTickets = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/tickets/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Tickets Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete account & profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Please Note: Your films will still go ahead and tickets cannot be cancelled unless the film fails to reach it\\'s target!')) {\n    try {\n      await axios.delete('/api/profile');\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your account has been permanantly deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/actions/profile.js"],"names":["axios","setAlert","GET_PROFILE","UPDATE_PROFILE","GET_PROFILES","PROFILE_ERROR","CLEAR_PROFILE","FILM_ERROR","GET_FILM","ACCOUNT_DELETED","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createProfile","formData","history","config","headers","post","console","log","edit","push","errors","forEach","error","loadProfiles","createFilm","updateUserTickets","put","deleteTickets","id","delete","deleteAccount","window","confirm"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\n\nimport {\n  GET_PROFILE,\n  UPDATE_PROFILE,\n  GET_PROFILES,\n  PROFILE_ERROR,\n  CLEAR_PROFILE,\n  FILM_ERROR,\n  GET_FILM,\n  ACCOUNT_DELETED,\n} from './types';\n\n\n// Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    //in dev, this is profile/me\n    const res = await axios.get('/api/profile/me');\n    // console.log(res.data)\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const createProfile = (\n  formData,\n  history\n) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.post('/api/profile', formData, config);\n    console.log(res)\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    \n      history.push('/dashboard');\n    \n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n\n\nexport const loadProfiles = () => async dispatch => {\n  \n  try {\n    const res = await axios.get('/api/profile');\n\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      //payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n  };\n\n// create film\nexport const createFilm = ( formData, history ) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    //note - when it comes to finalisng this, get ride of profile, put it in film path\n    const res = await axios.post('/api/profile/create-film', formData, config);    \n    dispatch({\n      type: GET_FILM,\n      payload: res.data\n    });\n\n    // dispatch(setAlert(edit ? 'Film updated' : 'Film created', 'success'));\n\n    // if(!edit) {\n    //   history.push('/dashboard');\n    // }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add Tickets\nexport const updateUserTickets = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const res = await axios.put('/api/profile/ticket', formData, config);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Tickets Added', 'success'));\n\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete experience\nexport const deleteTickets = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/tickets/${id}`);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Tickets Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n\n\n// Delete account & profile\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Please Note: Your films will still go ahead and tickets cannot be cancelled unless the film fails to reach it\\'s target!')) {\n    try {\n      await axios.delete('/api/profile');\n\n      dispatch({ type: CLEAR_PROFILE });\n      dispatch({ type: ACCOUNT_DELETED });\n\n      dispatch(setAlert('Your account has been permanantly deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}