{"ast":null,"code":"import _objectSpread from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { GET_FILM, UPDATE_FILM // GET FILMS,\n, FILM_ERROR } from '../actions/types';\nconst initialState = {\n  film: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case GET_FILM:\n    case UPDATE_FILM:\n      return _objectSpread({}, state, {\n        film: payload,\n        loading: false // error: {} \n\n      });\n\n    case FILM_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n} // update film\n\nexport const updateFilm = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // const res = await axios.put('/api/profile/booking', formData, config);\n\n    const res = await axios.put('/api/film/booking', formData, config);\n    dispatch({\n      type: UPDATE_FILM,\n      payload: res.data\n    });\n    dispatch(setAlert('Thanks for your booking', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/reducers/film.js"],"names":["GET_FILM","UPDATE_FILM","FILM_ERROR","initialState","film","loading","error","state","action","type","payload","updateFilm","formData","history","dispatch","config","headers","res","axios","put","data","setAlert","push","err","errors","response","forEach","msg","PROFILE_ERROR","statusText","status"],"mappings":";AAAA,SACEA,QADF,EAEEC,WAFF,CAGE;AAHF,EAIEC,UAJF,QAKO,kBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGJ,YAAjB,EAA+BK,MAA/B,EAAuC;AAAA,QACrCC,IADqC,GACnBD,MADmB,CACrCC,IADqC;AAAA,QAC/BC,OAD+B,GACnBF,MADmB,CAC/BE,OAD+B;;AAE9C,UAAQD,IAAR;AACE,SAAKT,QAAL;AACA,SAAKC,WAAL;AACA,+BACKM,KADL;AAEEH,QAAAA,IAAI,EAAEM,OAFR;AAGEL,QAAAA,OAAO,EAAE,KAHX,CAIE;;AAJF;;AAMA,SAAKH,UAAL;AACA,+BACKK,KADL;AAEED,QAAAA,KAAK,EAAEI,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKA;AACE,aAAOE,KAAP;AAhBJ;AAkBH,C,CAEL;;AACA,OAAO,MAAMI,UAAU,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,MAAMC,QAAN,IAAkB;AACjE,MAAI;AACF,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf,CADE,CAOF;;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAU,mBAAV,EAA+BP,QAA/B,EAAyCG,MAAzC,CAAlB;AACAD,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAER,WADC;AAEPS,MAAAA,OAAO,EAAEO,GAAG,CAACG;AAFN,KAAD,CAAR;AAKAN,IAAAA,QAAQ,CAACO,QAAQ,CAAC,yBAAD,EAA4B,SAA5B,CAAT,CAAR;AAEAR,IAAAA,OAAO,CAACS,IAAR,CAAa,YAAb;AACD,GAjBD,CAiBE,OAAOC,GAAP,EAAY;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaL,IAAb,CAAkBI,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAepB,KAAK,IAAIQ,QAAQ,CAACO,QAAQ,CAACf,KAAK,CAACqB,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAEDb,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAEmB,aADC;AAEPlB,MAAAA,OAAO,EAAE;AAAEiB,QAAAA,GAAG,EAAEJ,GAAG,CAACE,QAAJ,CAAaI,UAApB;AAAgCC,QAAAA,MAAM,EAAEP,GAAG,CAACE,QAAJ,CAAaK;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CA9BM","sourcesContent":["import {\n  GET_FILM,\n  UPDATE_FILM,\n  // GET FILMS,\n  FILM_ERROR\n} from '../actions/types';\n\nconst initialState = {\n  film: null,\n  loading: true,\n  error: {}\n};\n\nexport default function(state = initialState, action) {\n         const { type, payload } = action \n        switch (type) {\n          case GET_FILM:\n          case UPDATE_FILM:\n          return {\n            ...state,\n            film: payload,\n            loading: false\n            // error: {} \n          }; \n          case FILM_ERROR:\n          return {\n            ...state,\n            error: payload,\n            loading: false\n          }; \n          default:\n            return state\n        }\n    }\n\n// update film\nexport const updateFilm = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    // const res = await axios.put('/api/profile/booking', formData, config);\n    const res = await axios.put('/api/film/booking', formData, config);\n    dispatch({\n      type: UPDATE_FILM,\n      payload: res.data\n    });\n\n    dispatch(setAlert('Thanks for your booking', 'success'));\n\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n      "]},"metadata":{},"sourceType":"module"}