{"ast":null,"code":"import _objectSpread from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/booking-page/BookingPage.js\";\n// todo \n//at the moent - trying to get the screen to update with new model\n// 1 enter number of tickets, calculate price,  go to booking payment DONE\n// 2 send new object to createFilm - now can't update, creates new film. \n// separate the creation and update functions DONE\n//need to separete the films and users, and update separately DONE  \n// create tickets, return to dashboard with tickets on dashboard\n// book through landing page, go to a page that tells user your ticket will be sent when film confirmed\n//how to trigger rerender after booking?\n//how to push through payment without auth? trace where this is happening\n// only after loggin in and out are you permitted to buy a ticket??\n// getfilm and getfilms have same outcome, all films.\n// once they book, take user to their dashboard, with tickets and any films created  \n// can only do this with stripe payouts on server \n// 3 update film immediately with new ticket number\n// 4 with two sections, one for films, one for tickets \n// 5 why is bookpage called twice?\n// 6 why can i not navigate between the pages without losing the data?\n// questions\n// how does profile create film in a different channel? GOES THROUGH MODEL PROFILE\n// what is the process via which this happens in films reducer?\n// how does the server file link up to this? \nimport React, { useEffect, useState, Fragment } from 'react';\nimport { useParams } from 'react-router';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types'; //import Spinner from '../layout/Spinner';\n\nimport { connect } from 'react-redux';\nimport { getFilmById } from '../../actions/film'; // import { getCurrentProfile, getFilmById } from '../../actions/profile';\n\nimport { updateFilm } from '../../actions/film'; // import { updateFilm } from '../../actions/profile';\n\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button';\nimport queryString from 'query-string';\n\nconst CheckoutPage = ({\n  updateFilm,\n  match,\n  getFilmById,\n  film: {\n    film,\n    loading\n  },\n  // profile: { profile, loading },\n  history\n}) => {\n  useEffect(() => {\n    getFilmById(match.params.id);\n  }, [getFilmById, match.params.id]); //console.log(match.params.id);\n\n  console.log(film);\n\n  const _useState = useState({\n    _id: '',\n    user: '',\n    title: '',\n    date: '',\n    cinema: '',\n    image: '',\n    ticketPrice: '',\n    crowdfundTarget: '',\n    totalsoFar: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formData = _useState2[0],\n        setFormData = _useState2[1]; //shouldnt you do this on the server so we're not fetching all? \n  // const getFilm = film.film.filter(item => {\n  // \treturn item._id === match.params.id;\n  // });\n  // remove array brackets\n  // const film = []\n  // getFilm[0]; \n  //console.log(currentFilm)\n  //set booking total cost for live update on screen\n\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        bookingTotal = _useState4[0],\n        setBookingTotal = _useState4[1]; // fills the values with current values\n  //this fills initial values, and stops repeated calls to setFormData in useState\n\n\n  useEffect(() => {\n    // console.log(params.id)\n    getFilmById(match.params.id);\n    setFormData({\n      // ...state,\n      //   totalsoFar: ''\n      _id: !film._id ? '' : film._id,\n      user: !film.user ? '' : film.user,\n      title: !film.title ? '' : film.title,\n      cinema: !film.cinema ? '' : film.cinema,\n      date: !film.date ? '' : film.date,\n      image: !film.image ? '' : film.image,\n      ticketPrice: !film.ticketPrice ? '' : film.ticketPrice,\n      crowdfundTarget: !film.crowdfundTarget ? '' : film.crowdfundTarget,\n      totalsoFar: !film.totalsoFar ? '' : film.totalsoFar\n    });\n  }, [getFilmById]); // console.log(film)\n  // console.log(formData)\n\n  let _id = formData._id,\n      user = formData.user,\n      title = formData.title,\n      date = formData.date,\n      cinema = formData.cinema,\n      image = formData.image,\n      ticketPrice = formData.ticketPrice,\n      crowdfundTarget = formData.crowdfundTarget,\n      totalsoFar = formData.totalsoFar;\n  let tickets = 0;\n\n  const onChange = e => {\n    // setFormData({ ...formData, [e.target.name]: e.target.value });\n    // tickets = film.totalsoFar + parseInt(e.target.value)\n    // setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n    setFormData(_objectSpread({}, formData, {\n      totalsoFar: tickets\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    console.log(formData);\n    updateFilm(formData, history); //you need\t to update film in this fn\n  }; //if (film === null) return null;\n\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, film === null || loading ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"loading\") : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"checkout-page how-it-works\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"checkout-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"// \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Film: \", film.title)), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"// \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Date: \", film.date, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"// \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Price: \\xA3\", film.ticketPrice, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"// \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Crowdfunding Target: \", film.crowdfundTarget, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"// \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Tickets sold: \", film.totalsoFar)), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"// \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, film._id))))), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"number\",\n    placeholder: \"Enter number of tickets\",\n    name: \"tickets\",\n    onChange: e => onChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"Basket total: \\xA3\", bookingTotal)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(Link, {\n    className: \"btn btn-light my-1\",\n    to: \"/dashboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Go Back\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    // movie_id={film}\n    onClick: e => onSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(StripeCheckoutButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }), \"}\")))));\n};\n\nCheckoutPage.propTypes = {\n  updateFilm: PropTypes.func.isRequired,\n  // getCurrentProfile: PropTypes.func.isRequired,\n  getFilmById: PropTypes.func.isRequired,\n  film: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile,\n  film: state.film\n});\n\nexport default connect(mapStateToProps, {\n  updateFilm,\n  getFilmById\n})(withRouter(CheckoutPage)); // <p>Tickets sold: {Object.values(formData)}</p>\n// const CheckoutPage = ({\n// \tupdateFilm,\n// \tgetCurrentProfile,\n// \tprofile: { profile, loading },\n// \thistory, \n// \t// id,\n// }) => {\n// \tconst [formData, setFormData] = useState({\n// \t\t_id: '',\n// \t\tuser: '',\n// \t\ttitle: '',\n// \t\tdate: '',\n// \t\tcinema: '',\n// \t\timage: '',\n// \t\tticketPrice: '',\n// \t\tcrowdfundTarget: '',\n// \t\ttotalsoFar: ''\n// \t}, [setFormData]);\n// \tlet params = useParams();\n// \tconst film = params;\n// \tconst [bookingTotal, setBookingTotal] = useState(0);\n// \t// fills the values with current values\n// \tuseEffect(() => {\n// \t\tgetCurrentProfile();\n// \tsetFormData({\n//       _id: !film._id ? '' : film._id,\n//       user: !film.user ? '' : film.user,\n//       title: !film.title ? '' : film.title,\n//       cinema: !film.cinema ? '' : film.cinema,\n//       date: !film.date ? '' : film.date,\n//       image: !film.image ? '' : film.image,\n//       ticketPrice: !film.ticketPrice ? '' : film.ticketPrice,\n//       crowdfundTarget: !film.crowdfundTarget ? '' : film.crowdfundTarget,\n//       totalsoFar: !film.totalsoFar ? '' : film.totalsoFar\n//     });\n//   }, [loading, getCurrentProfile]);\n// \tlet {\n// \t\t_id,\n// \t\tuser,\n// \t\ttitle,\n// \t\tdate,\n// \t\tcinema,\n// \t\timage,\n// \t\tticketPrice,\n// \t\tcrowdfundTarget,\n// \t\ttotalsoFar\n// \t} = formData;\n// \tlet tickets = 0;\n// \tconst onChange = e => {\n// \t\t// setFormData({ ...formData, [e.target.name]: e.target.value });\n// \t\ttickets = profile.totalsoFar + parseInt(e.target.value)\n// \t\tsetBookingTotal(parseInt(profile.ticketPrice) * parseInt(e.target.value));\n// \t\tsetFormData({ ...formData, totalsoFar: tickets });\n// \t\t// console.log(bookingTotal)\n// \t}\t\n// \tconst onSubmit = (e, film_id) => {\n// \t\te.preventDefault();\n// \t\t// console.log(film_id)\n// \t\tupdateFilm(formData, history);\n// \t};\n// \treturn (\n// \t<div>\n// \t<form>\n// \t<div className='checkout-page how-it-works'>\n// \t\t<div className='checkout-header'>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Film: {profile.title}</span>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Date: {profile.date} </span>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Price: £{profile.ticketPrice} </span>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Crowdfunding Target: {profile.crowdfundTarget} </span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>Tickets sold: {profile.totalsoFar}</span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>{profile._id}</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t\t</div>\n// \t\t</form>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='number'\n// \t\t\t\t\tplaceholder='Enter number of tickets'\n// \t\t\t\t\tname='tickets'\n// \t\t\t\t\tonChange={e => onChange(e)}\n// \t\t\t\t/>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Basket total: £{bookingTotal}</span>\n// \t\t\t</div>\n// \t\t\t<div>\n// \t\t\t<Link className='btn btn-light my-1' to='/dashboard'>Go Back\n// \t\t\t</Link>\n// \t\t\t</div>\n// \t\t\t<div>\n// \t\t\t\t<span \n// \t\t\t\t// movie_id={film}\n// \t\t\t\tonClick={e => onSubmit(e)}>\n// \t\t\t\t\t<StripeCheckoutButton />\n// \t\t\t\t\t}\n// \t\t\t\t</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// };","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/booking-page/BookingPage.js"],"names":["React","useEffect","useState","Fragment","useParams","Link","withRouter","Redirect","PropTypes","connect","getFilmById","updateFilm","StripeCheckoutButton","queryString","CheckoutPage","match","film","loading","history","params","id","console","log","_id","user","title","date","cinema","image","ticketPrice","crowdfundTarget","totalsoFar","formData","setFormData","bookingTotal","setBookingTotal","tickets","onChange","e","onSubmit","preventDefault","propTypes","func","isRequired","object","profile","mapStateToProps","state"],"mappings":"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":["// todo \n//at the moent - trying to get the screen to update with new model\n// 1 enter number of tickets, calculate price,  go to booking payment DONE\n// 2 send new object to createFilm - now can't update, creates new film. \n\t// separate the creation and update functions DONE\n\t//need to separete the films and users, and update separately DONE  \n\t// create tickets, return to dashboard with tickets on dashboard\n\n// book through landing page, go to a page that tells user your ticket will be sent when film confirmed\n//how to trigger rerender after booking?\n//how to push through payment without auth? trace where this is happening\n// only after loggin in and out are you permitted to buy a ticket??\n// getfilm and getfilms have same outcome, all films.\n\n// once they book, take user to their dashboard, with tickets and any films created  \n// can only do this with stripe payouts on server \n// 3 update film immediately with new ticket number\n// 4 with two sections, one for films, one for tickets \n// 5 why is bookpage called twice?\n// 6 why can i not navigate between the pages without losing the data?\n\n\n// questions\n// how does profile create film in a different channel? GOES THROUGH MODEL PROFILE\n// what is the process via which this happens in films reducer?\n// how does the server file link up to this? \n\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { useParams} from 'react-router';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n//import Spinner from '../layout/Spinner';\nimport { connect } from 'react-redux';\nimport { getFilmById } from '../../actions/film';\n// import { getCurrentProfile, getFilmById } from '../../actions/profile';\nimport { updateFilm } from '../../actions/film';\n// import { updateFilm } from '../../actions/profile';\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button';\nimport queryString from 'query-string';\n\nconst CheckoutPage = ({\n\tupdateFilm,\n\tmatch,\n\tgetFilmById,\n\tfilm: {film, loading},\n\t// profile: { profile, loading },\n\thistory\n}) => {\n\tuseEffect(() => {\n    getFilmById(match.params.id);\n  }, [getFilmById, match.params.id]);\n\t//console.log(match.params.id);\n\tconsole.log(film);\n\t\n\tconst [formData, setFormData] = useState({\n\t\t_id: '',\n\t\tuser: '',\n\t\ttitle: '',\n\t\tdate: '',\n\t\tcinema: '',\n\t\timage: '',\n\t\tticketPrice: '',\n\t\tcrowdfundTarget: '',\n\t\ttotalsoFar: ''\n\t});\n\n\n\t//shouldnt you do this on the server so we're not fetching all? \n\t// const getFilm = film.film.filter(item => {\n\t// \treturn item._id === match.params.id;\n\t// });\n\t\n\t// remove array brackets\n\t// const film = []\n\t// getFilm[0]; \n\t//console.log(currentFilm)\n\t//set booking total cost for live update on screen\n\tconst [bookingTotal, setBookingTotal] = useState(0);\n\t\n\t// fills the values with current values\n\t//this fills initial values, and stops repeated calls to setFormData in useState\n\tuseEffect(() => {\n\t\t// console.log(params.id)\n\t\tgetFilmById(match.params.id)\n\tsetFormData({\n      // ...state,\n      //   totalsoFar: ''\n      _id: !film._id ? '' : film._id,\n      user: !film.user ? '' : film.user,\n      title: !film.title ? '' : film.title,\n      cinema: !film.cinema ? '' : film.cinema,\n      date: !film.date ? '' : film.date,\n      image: !film.image ? '' : film.image,\n      ticketPrice: !film.ticketPrice ? '' : film.ticketPrice,\n      crowdfundTarget: !film.crowdfundTarget ? '' : film.crowdfundTarget,\n      totalsoFar: !film.totalsoFar ? '' : film.totalsoFar\n    });\n  }, [getFilmById]);\n\t// console.log(film)\n\t// console.log(formData)\n\tlet {\n\t\t_id,\n\t\tuser,\n\t\ttitle,\n\t\tdate,\n\t\tcinema,\n\t\timage,\n\t\tticketPrice,\n\t\tcrowdfundTarget,\n\t\ttotalsoFar\n\t} = formData;\n\n\tlet tickets = 0;\n\t\t\t\n\tconst onChange = e => {\n\t\t// setFormData({ ...formData, [e.target.name]: e.target.value });\n\t\t// tickets = film.totalsoFar + parseInt(e.target.value)\n\t\t// setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n\t\tsetFormData({ ...formData, totalsoFar: tickets });\n\t}\t\n\t\t\n\tconst onSubmit = (e) => {\n\t\te.preventDefault();\n\t\tconsole.log(formData)\t\t\n\t\tupdateFilm(formData, history);\n\t\t//you need\t to update film in this fn\n\t};\n\t\n\t//if (film === null) return null;\n\t\n\treturn (\n\t\t<Fragment>\n\t\t{film === null || loading ? ( \n\t\t<p>loading</p>\n      ) : (\n    \t<Fragment>  \n\t\t<div>\n\t<form>\n\t<div className='checkout-page how-it-works'>\n\t\t<div className='checkout-header'>\n\t\t\t<div className='header-block'>\n\t\t\t\t// <span>Film: {film.title}</span>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className='header-block'>\n\t\t\t\t// <span>Date: {film.date} </span>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className='header-block'>\n\t\t\t\t// <span>Price: £{film.ticketPrice} </span>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className='header-block'>\n\t\t\t\t// <span>Crowdfunding Target: {film.crowdfundTarget} </span>\n\t\t\t</div>\n\t\t\t<div \n\t\t\tclassName='header-block'>\n\t\t\t\t// <span>Tickets sold: {film.totalsoFar}</span>\n\t\t\t</div>\n\t\t\t<div \n\t\t\tclassName='header-block'>\n\t\t\t\t// <span>{film._id}</span>\n\t\t\t</div>\n\t\t</div>\n\t\t</div>\n\t\t</form>\n\t\t\t<div className='header-block'>\n\t\t\t\t<input\n\t\t\t\t\ttype='number'\n\t\t\t\t\tplaceholder='Enter number of tickets'\n\t\t\t\t\tname='tickets'\n\t\t\t\t\tonChange={e => onChange(e)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className='header-block'>\n\t\t\t\t<span>Basket total: £{bookingTotal}</span>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t<Link className='btn btn-light my-1' to='/dashboard'>Go Back\n\t\t\t</Link>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\n\t\t\t\t<span \n\t\t\t\t// movie_id={film}\n\t\t\t\tonClick={e => onSubmit(e)}>\n\t\t\t\t\t<StripeCheckoutButton />\n\t\t\t\t\t}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t\t</Fragment>\n\t\t)}\n\t    </Fragment>\t\n\t\t);\n\t};\n\n\nCheckoutPage.propTypes = {\n\tupdateFilm: PropTypes.func.isRequired,\n\t// getCurrentProfile: PropTypes.func.isRequired,\n\tgetFilmById: PropTypes.func.isRequired,\n\tfilm: PropTypes.object.isRequired,\n\tprofile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n\tprofile: state.profile,\n\tfilm: state.film\n});\n\nexport default connect(mapStateToProps, { updateFilm, getFilmById })(\n\twithRouter(CheckoutPage)\n);\n\n// <p>Tickets sold: {Object.values(formData)}</p>\n\t\n\n// const CheckoutPage = ({\n// \tupdateFilm,\n// \tgetCurrentProfile,\n// \tprofile: { profile, loading },\n// \thistory, \n// \t// id,\n// }) => {\n// \tconst [formData, setFormData] = useState({\n// \t\t_id: '',\n// \t\tuser: '',\n// \t\ttitle: '',\n// \t\tdate: '',\n// \t\tcinema: '',\n// \t\timage: '',\n// \t\tticketPrice: '',\n// \t\tcrowdfundTarget: '',\n// \t\ttotalsoFar: ''\n// \t}, [setFormData]);\n\n// \tlet params = useParams();\n// \tconst film = params;\n\t\n// \tconst [bookingTotal, setBookingTotal] = useState(0);\n\t\n// \t// fills the values with current values\n\t\n// \tuseEffect(() => {\n// \t\tgetCurrentProfile();\n// \tsetFormData({\n//       _id: !film._id ? '' : film._id,\n//       user: !film.user ? '' : film.user,\n//       title: !film.title ? '' : film.title,\n//       cinema: !film.cinema ? '' : film.cinema,\n//       date: !film.date ? '' : film.date,\n//       image: !film.image ? '' : film.image,\n//       ticketPrice: !film.ticketPrice ? '' : film.ticketPrice,\n//       crowdfundTarget: !film.crowdfundTarget ? '' : film.crowdfundTarget,\n//       totalsoFar: !film.totalsoFar ? '' : film.totalsoFar\n//     });\n//   }, [loading, getCurrentProfile]);\n\n// \tlet {\n// \t\t_id,\n// \t\tuser,\n// \t\ttitle,\n// \t\tdate,\n// \t\tcinema,\n// \t\timage,\n// \t\tticketPrice,\n// \t\tcrowdfundTarget,\n// \t\ttotalsoFar\n// \t} = formData;\n\n// \tlet tickets = 0;\n\t\t\t\n// \tconst onChange = e => {\n// \t\t// setFormData({ ...formData, [e.target.name]: e.target.value });\n// \t\ttickets = profile.totalsoFar + parseInt(e.target.value)\n// \t\tsetBookingTotal(parseInt(profile.ticketPrice) * parseInt(e.target.value));\n// \t\tsetFormData({ ...formData, totalsoFar: tickets });\n// \t\t// console.log(bookingTotal)\n// \t}\t\n\t\t\n// \tconst onSubmit = (e, film_id) => {\n// \t\te.preventDefault();\n// \t\t// console.log(film_id)\n// \t\tupdateFilm(formData, history);\n// \t};\n\n// \treturn (\n// \t<div>\n// \t<form>\n// \t<div className='checkout-page how-it-works'>\n// \t\t<div className='checkout-header'>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Film: {profile.title}</span>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Date: {profile.date} </span>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Price: £{profile.ticketPrice} </span>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Crowdfunding Target: {profile.crowdfundTarget} </span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>Tickets sold: {profile.totalsoFar}</span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>{profile._id}</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t\t</div>\n// \t\t</form>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='number'\n// \t\t\t\t\tplaceholder='Enter number of tickets'\n// \t\t\t\t\tname='tickets'\n// \t\t\t\t\tonChange={e => onChange(e)}\n// \t\t\t\t/>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Basket total: £{bookingTotal}</span>\n// \t\t\t</div>\n// \t\t\t<div>\n// \t\t\t<Link className='btn btn-light my-1' to='/dashboard'>Go Back\n// \t\t\t</Link>\n// \t\t\t</div>\n// \t\t\t<div>\n\t\t\n// \t\t\t\t<span \n// \t\t\t\t// movie_id={film}\n// \t\t\t\tonClick={e => onSubmit(e)}>\n// \t\t\t\t\t<StripeCheckoutButton />\n// \t\t\t\t\t}\n// \t\t\t\t</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// };\n\n"]},"metadata":{},"sourceType":"module"}