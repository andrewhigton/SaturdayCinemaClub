{"ast":null,"code":"import _slicedToArray from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/booking-page/BookingPage.js\";\n// todo \n//at the moent - trying to get the screen to update with new model\n// 1 enter number of tickets, calculate price,  go to booking payment DONE\n// 2 send new object to createFilm - now can't update, creates new film. \n// separate the creation and update functions DONE\n//need to separete the films and users, and update separately DONE  \n// create tickets, return to dashboard with tickets on dashboard\n// book through landing page, go to a page that tells user your ticket will be sent when film confirmed\n//how to trigger rerender after booking?\n//how to push through payment without auth? trace where this is happening\n// only after loggin in and out are you permitted to buy a ticket??\n// getfilm and getfilms have same outcome, all films.\n// once they book, take user to their dashboard, with tickets and any films created  \n// can only do this with stripe payouts on server \n// 3 update film immediately with new ticket number\n// 4 with two sections, one for films, one for tickets \n// 5 why is bookpage called twice?\n// 6 why can i not navigate between the pages without losing the data?\n// next move - turn this into an indvidual movie page, load film, get api etc\n// then - pass the movie down as a prop, so that it's all there\n// questions\n// how does profile create film in a different channel? GOES THROUGH MODEL PROFILE\n// what is the process via which this happens in films reducer?\n// how does the server file link up to this? \nimport React, { useEffect, useState, Fragment } from 'react';\nimport { useParams } from 'react-router';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Spinner from '../layout/Spinner';\nimport { connect } from 'react-redux';\nimport { getFilmById, updateFilm } from '../../actions/film';\nimport CheckoutFilm from '../checkout-film/Checkout-Film'; // import { getCurrentProfile, getFilmById } from '../../actions/profile';\n// import { updateFilm } from '../../actions/profile';\n\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button'; //import queryString from 'query-string';\n\nconst FilmPage = ({\n  updateFilm,\n  getFilmById,\n  film: {\n    film,\n    loading\n  },\n  match,\n  // profile: { profile, loading },\n  history\n}) => {\n  useEffect(() => {\n    // if(film !== null) {\n    getFilmById(match.params.film_id);\n  }, [loading, getFilmById]); // next - how the hell did match change?\n  // console.log(match)\n  //console.log(match.params.id);\n  //why does this log 4 times? \n  //and why doesn update not work at route?\n  //go back to the video to work this out. what is req.user.i\n  // console.log(film);\n  //this creates the state\n\n  const _useState = useState({\n    _id: '',\n    user: '',\n    title: '',\n    date: '',\n    cinema: '',\n    image: '',\n    ticketPrice: '',\n    crowdfundTarget: '',\n    totalsoFar: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formData = _useState2[0],\n        setFormData = _useState2[1]; //console.log(formData)\n\n\n  let _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      bookingTotal = _useState4[0],\n      setBookingTotal = _useState4[1]; // remove array brackets\n  // const film = []\n  // getFilm[0]; \n  //console.log(currentFilm)\n  //set booking total cost for live update on screen\n  //this fills initial values, and stops repeated calls to setFormData in useState\n  // problem - it tries to set state before film is loaded. how to delay this?  \n  //set's the values of the state\n\n\n  useEffect(() => {\n    getFilmById(match.params.id); // if(film !== null) {   \n    // if(film) {   \n    // if(!loading) {\n    //console.log('film')\n\n    setFormData({\n      // ...state,\n      //   totalsoFar: ''\n      // _id: !loading || !film._id ? _id : film._id,\n      // user: loading || !film.user ? user : film.user,\n      // title: loading || !film.title ? title : film.title,\n      // cinema: loading || !film.cinema ? cinema : film.cinema,\n      // date: loading || !film.date ? date : film.date,\n      // image: loading || !film.image ? image : film.image,\n      // ticketPrice: loading || !film.ticketPrice ? ticketPrice : film.ticketPrice,\n      // crowdfundTarget: loading || !film.crowdfundTarget ? crowdfundTarget : film.crowdfundTarget,\n      // totalsoFar: loading || !film.totalsoFar ? totalsoFar : film.totalsoFar\n      // //you don't actually need this form for the most part. \n      //if(film._id !== '') {_id: film._id }\n      _id: loading || !film._id ? '' : film._id,\n      user: loading || !film.user ? '' : film.user,\n      title: loading || !film.title ? '' : film.title,\n      cinema: loading || !film.cinema ? '' : film.cinema,\n      date: loading || !film.date ? '' : film.date,\n      image: loading || !film.image ? '' : film.image,\n      ticketPrice: loading || !film.ticketPrice ? '' : film.ticketPrice,\n      crowdfundTarget: loading || !film.crowdfundTarget ? '' : film.crowdfundTarget,\n      totalsoFar: loading || !film.totalsoFar ? '' : film.totalsoFar\n    }); // }\n  }, [loading, getFilmById]); // \t// console.log(film)\n  //\t\tconsole.log(formData)\n  //why is this established, then it empties out?\n  //what the hell? \t\n  //creates the vars for the render \n\n  const _id = formData._id,\n        user = formData.user,\n        title = formData.title,\n        date = formData.date,\n        cinema = formData.cinema,\n        image = formData.image,\n        ticketPrice = formData.ticketPrice,\n        crowdfundTarget = formData.crowdfundTarget,\n        totalsoFar = formData.totalsoFar; //let tickets = 0;\n  //the pattern is this.\n  // 1 initiate consts with above\t\t\n  // 2 onchange calls setformdata with values attached\n  // 3 when is setformdata called, interms of being wrapped in useEffect(fetches current film)?\n  // 4 setFormData sets initial state to values.  \n  // 5 so state values are either '', or the value attached to film. which is there. but not getting them \n  // 6 are we reloading film. is that the problem? \n  // const onChange = e => {\n  // \t//setFormData({ ...formData, [e.target.name]: e.target.value });\n  // \ttickets = film.totalsoFar + parseInt(e.target.value)\n  // \tsetBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n  // \tsetFormData({ ...formData, totalsoFar: tickets });\n  // }\t\n  // const onSubmit = (e) => {\n  // \te.preventDefault();\n  // \tconsole.log(formData)\n  // \tupdateFilm(formData, history);\n  // };\n  //if (film === null) return null;\n\n  useEffect(() => {\n    getFilmById(match.params.id); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loading, getFilmById]); //if (film === null) return null;\n\n  return !film ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"checkout-page how-it-works\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"checkout-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"Film: \", film.title)), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Date: \", film.date, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"Price: \\xA3\", film.ticketPrice, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Crowdfunding Target: \", film.crowdfundTarget, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"Tickets sold: \", film.totalsoFar))))), React.createElement(Link, {\n    to: `booking/${_id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"custom-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  })))) // )}\n  // </Fragment>\t\n  ;\n};\n\nFilmPage.propTypes = {\n  updateFilm: PropTypes.func.isRequired,\n  // getCurrentProfile: PropTypes.func.isRequired,\n  getFilmById: PropTypes.func.isRequired,\n  film: PropTypes.object.isRequired //profile: PropTypes.object.isRequired\n\n};\n\nconst mapStateToProps = state => ({\n  //profile: state.profile,\n  film: state.film\n});\n\nexport default connect(mapStateToProps, {\n  updateFilm,\n  getFilmById\n})(withRouter(FilmPage)); // <p>Tickets sold: {Object.values(formData)}</p>\n// const CheckoutPage = ({\n// \tupdateFilm,\n// \tgetCurrentProfile,\n// \tprofile: { profile, loading },\n// \thistory, \n// \t// id,\n// }) => {\n// \tconst [formData, setFormData] = useState({\n// \t\t_id: '',\n// \t\tuser: '',\n// \t\ttitle: '',\n// \t\tdate: '',\n// \t\tcinema: '',\n// \t\timage: '',\n// \t\tticketPrice: '',\n// \t\tcrowdfundTarget: '',\n// \t\ttotalsoFar: ''\n// \t}, [setFormData]);\n// \tlet params = useParams();\n// \tconst film = params;\n// \tconst [bookingTotal, setBookingTotal] = useState(0);\n// \t// fills the values with current values\n// \tuseEffect(() => {\n// \t\tgetCurrentProfile();\n// \tsetFormData({\n//       _id: !film._id ? '' : film._id,\n//       user: !film.user ? '' : film.user,\n//       title: !film.title ? '' : film.title,\n//       cinema: !film.cinema ? '' : film.cinema,\n//       date: !film.date ? '' : film.date,\n//       image: !film.image ? '' : film.image,\n//       ticketPrice: !film.ticketPrice ? '' : film.ticketPrice,\n//       crowdfundTarget: !film.crowdfundTarget ? '' : film.crowdfundTarget,\n//       totalsoFar: !film.totalsoFar ? '' : film.totalsoFar\n//     });\n//   }, [loading, getCurrentProfile]);\n// \tlet {\n// \t\t_id,\n// \t\tuser,\n// \t\ttitle,\n// \t\tdate,\n// \t\tcinema,\n// \t\timage,\n// \t\tticketPrice,\n// \t\tcrowdfundTarget,\n// \t\ttotalsoFar\n// \t} = formData;\n// \tlet tickets = 0;\n// \tconst onChange = e => {\n// \t\t// setFormData({ ...formData, [e.target.name]: e.target.value });\n// \t\ttickets = profile.totalsoFar + parseInt(e.target.value)\n// \t\tsetBookingTotal(parseInt(profile.ticketPrice) * parseInt(e.target.value));\n// \t\tsetFormData({ ...formData, totalsoFar: tickets });\n// \t\t// console.log(bookingTotal)\n// \t}\t\n// \tconst onSubmit = (e, film_id) => {\n// \t\te.preventDefault();\n// \t\t// console.log(film_id)\n// \t\tupdateFilm(formData, history);\n// \t};\n// \treturn (\n// \t<div>\n// \t<form>\n// \t<div className='checkout-page how-it-works'>\n// \t\t<div className='checkout-header'>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Film: {profile.title}</span>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Date: {profile.date} </span>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Price: £{profile.ticketPrice} </span>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Crowdfunding Target: {profile.crowdfundTarget} </span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>Tickets sold: {profile.totalsoFar}</span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>{profile._id}</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t\t</div>\n// \t\t</form>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='number'\n// \t\t\t\t\tplaceholder='Enter number of tickets'\n// \t\t\t\t\tname='tickets'\n// \t\t\t\t\tonChange={e => onChange(e)}\n// \t\t\t\t/>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Basket total: £{bookingTotal}</span>\n// \t\t\t</div>\n// \t\t\t<div>\n// \t\t\t<Link className='btn btn-light my-1' to='/dashboard'>Go Back\n// \t\t\t</Link>\n// \t\t\t</div>\n// \t\t\t<div>\n// \t\t\t\t<span \n// \t\t\t\t// movie_id={film}\n// \t\t\t\tonClick={e => onSubmit(e)}>\n// \t\t\t\t\t<StripeCheckoutButton />\n// \t\t\t\t\t}\n// \t\t\t\t</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// };","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/booking-page/BookingPage.js"],"names":["React","useEffect","useState","Fragment","useParams","Link","withRouter","Redirect","PropTypes","Spinner","connect","getFilmById","updateFilm","CheckoutFilm","StripeCheckoutButton","FilmPage","film","loading","match","history","params","film_id","_id","user","title","date","cinema","image","ticketPrice","crowdfundTarget","totalsoFar","formData","setFormData","bookingTotal","setBookingTotal","id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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":["// todo \n//at the moent - trying to get the screen to update with new model\n// 1 enter number of tickets, calculate price,  go to booking payment DONE\n// 2 send new object to createFilm - now can't update, creates new film. \n\t// separate the creation and update functions DONE\n\t//need to separete the films and users, and update separately DONE  \n\t// create tickets, return to dashboard with tickets on dashboard\n\n// book through landing page, go to a page that tells user your ticket will be sent when film confirmed\n//how to trigger rerender after booking?\n//how to push through payment without auth? trace where this is happening\n// only after loggin in and out are you permitted to buy a ticket??\n// getfilm and getfilms have same outcome, all films.\n\n// once they book, take user to their dashboard, with tickets and any films created  \n// can only do this with stripe payouts on server \n// 3 update film immediately with new ticket number\n// 4 with two sections, one for films, one for tickets \n// 5 why is bookpage called twice?\n// 6 why can i not navigate between the pages without losing the data?\n\n// next move - turn this into an indvidual movie page, load film, get api etc\n// then - pass the movie down as a prop, so that it's all there\n\n// questions\n// how does profile create film in a different channel? GOES THROUGH MODEL PROFILE\n// what is the process via which this happens in films reducer?\n// how does the server file link up to this? \n\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { useParams} from 'react-router';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Spinner from '../layout/Spinner';\nimport { connect } from 'react-redux';\nimport { getFilmById, updateFilm } from '../../actions/film';\nimport CheckoutFilm from '../checkout-film/Checkout-Film'\n// import { getCurrentProfile, getFilmById } from '../../actions/profile';\n\n// import { updateFilm } from '../../actions/profile';\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button';\n//import queryString from 'query-string';\n\nconst FilmPage = ({\n\tupdateFilm,\n\tgetFilmById,\n\tfilm: {film, loading},\n\tmatch,\n\t// profile: { profile, loading },\n\thistory\n}) => {\n\tuseEffect(() => {\n\t\t// if(film !== null) {\n\tgetFilmById(match.params.film_id);\n  \t}, [loading, getFilmById]);\n\t// next - how the hell did match change?\n\n\n\n\t// console.log(match)\n\t//console.log(match.params.id);\n\t//why does this log 4 times? \n\t//and why doesn update not work at route?\n\t//go back to the video to work this out. what is req.user.i\n\t// console.log(film);\n\t\n//this creates the state\n\tconst [formData, setFormData] = useState({\n\t\t_id: '',\n\t\tuser: '',\n\t\ttitle: '',\n\t\tdate: '',\n\t\tcinema: '',\n\t\timage: '',\n\t\tticketPrice: '',\n\t\tcrowdfundTarget: '',\n\t\ttotalsoFar: ''\n\t});\n\t//console.log(formData)\n\tlet [bookingTotal, setBookingTotal] = useState(0);\n\t// remove array brackets\n\t// const film = []\n\t// getFilm[0]; \n\t//console.log(currentFilm)\n\t//set booking total cost for live update on screen\n\t\n\t//this fills initial values, and stops repeated calls to setFormData in useState\n\t// problem - it tries to set state before film is loaded. how to delay this?  \n\t\n\t//set's the values of the state\n\tuseEffect(() => {\t\n      \tgetFilmById(match.params.id);\t\n\n\t// if(film !== null) {   \n\t// if(film) {   \n\t// if(!loading) {\n\t\t//console.log('film')\n\t\tsetFormData({\n\t      // ...state,\n\t      //   totalsoFar: ''\n\t      // _id: !loading || !film._id ? _id : film._id,\n\t      // user: loading || !film.user ? user : film.user,\n\t      // title: loading || !film.title ? title : film.title,\n\t      // cinema: loading || !film.cinema ? cinema : film.cinema,\n\t      // date: loading || !film.date ? date : film.date,\n\t      // image: loading || !film.image ? image : film.image,\n\t      // ticketPrice: loading || !film.ticketPrice ? ticketPrice : film.ticketPrice,\n\t      // crowdfundTarget: loading || !film.crowdfundTarget ? crowdfundTarget : film.crowdfundTarget,\n\t      // totalsoFar: loading || !film.totalsoFar ? totalsoFar : film.totalsoFar\n\t      // //you don't actually need this form for the most part. \n\t      //if(film._id !== '') {_id: film._id }\n\t      _id: loading || !film._id ? '' : film._id,\n\t      user: loading || !film.user ? '' : film.user,\n\t      title: loading || !film.title ? '' : film.title,\n\t      cinema: loading || !film.cinema ? '' : film.cinema,\n\t      date: loading || !film.date ? '' : film.date,\n\t      image: loading || !film.image ? '' : film.image,\n\t      ticketPrice: loading || !film.ticketPrice ? '' : film.ticketPrice,\n\t      crowdfundTarget: loading || !film.crowdfundTarget ? '' : film.crowdfundTarget,\n\t      totalsoFar: loading || !film.totalsoFar ? '' : film.totalsoFar\n\t    \t\t});\n\t\t\t// }\n\t   }, [loading, getFilmById]);\n\t// \t// console.log(film)\n//\t\tconsole.log(formData)\n\t//why is this established, then it empties out?\n\t//what the hell? \t\n\t//creates the vars for the render \n\tconst {\n\t\t_id,\n\t\tuser,\n\t\ttitle,\n\t\tdate,\n\t\tcinema,\n\t\timage,\n\t\tticketPrice,\n\t\tcrowdfundTarget,\n\t\ttotalsoFar\n\t} = formData;\n\n\t//let tickets = 0;\n\t\n\t//the pattern is this.\n\t// 1 initiate consts with above\t\t\n\t// 2 onchange calls setformdata with values attached\n\t// 3 when is setformdata called, interms of being wrapped in useEffect(fetches current film)?\n\t// 4 setFormData sets initial state to values.  \n\t// 5 so state values are either '', or the value attached to film. which is there. but not getting them \n\t// 6 are we reloading film. is that the problem? \n\n\t// const onChange = e => {\n\t// \t//setFormData({ ...formData, [e.target.name]: e.target.value });\n\t// \ttickets = film.totalsoFar + parseInt(e.target.value)\n\t// \tsetBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n\t// \tsetFormData({ ...formData, totalsoFar: tickets });\n\t// }\t\n\t\t\n\t// const onSubmit = (e) => {\n\t// \te.preventDefault();\n\t// \tconsole.log(formData)\n\t\n\t// \tupdateFilm(formData, history);\n\t// };\n\t\n\t//if (film === null) return null;\n\tuseEffect(() => {\n\t\tgetFilmById(match.params.id)\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [loading, getFilmById]);\n\t//if (film === null) return null;\n\treturn !film ? (\n\t\t\t\t\t<Spinner />\t\n\t\t\t   ) : (\n\t\t\t    \t<Fragment>  \n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t<div className='checkout-page how-it-works'>\n\t\t\t\t\t\t\t\t\t<div className='checkout-header'>\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Film: {film.title}</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Date: {film.date} </span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Price: £{film.ticketPrice} </span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Crowdfunding Target: {film.crowdfundTarget} </span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div \n\t\t\t\t\t\t\t\t\t\tclassName='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Tickets sold: {film.totalsoFar}</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t<Link to={`booking/${_id}`}>    \n\t\t\t\t\t\t\t            <button \n\t\t\t\t\t\t\t            className='custom-button'\n\t\t\t\t\t\t\t            />\n            \t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t\t// )}\n\t    // </Fragment>\t\n\t\t);\n\t};\n\n\nFilmPage.propTypes = {\n\tupdateFilm: PropTypes.func.isRequired,\n\t// getCurrentProfile: PropTypes.func.isRequired,\n\tgetFilmById: PropTypes.func.isRequired,\n\tfilm: PropTypes.object.isRequired,\n\t//profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n\t//profile: state.profile,\n\tfilm: state.film\n});\n\nexport default connect(mapStateToProps, { updateFilm, getFilmById })(\n\twithRouter(FilmPage)\n);\n\n// <p>Tickets sold: {Object.values(formData)}</p>\n\t\n\n// const CheckoutPage = ({\n// \tupdateFilm,\n// \tgetCurrentProfile,\n// \tprofile: { profile, loading },\n// \thistory, \n// \t// id,\n// }) => {\n// \tconst [formData, setFormData] = useState({\n// \t\t_id: '',\n// \t\tuser: '',\n// \t\ttitle: '',\n// \t\tdate: '',\n// \t\tcinema: '',\n// \t\timage: '',\n// \t\tticketPrice: '',\n// \t\tcrowdfundTarget: '',\n// \t\ttotalsoFar: ''\n// \t}, [setFormData]);\n\n// \tlet params = useParams();\n// \tconst film = params;\n\t\n// \tconst [bookingTotal, setBookingTotal] = useState(0);\n\t\n// \t// fills the values with current values\n\t\n// \tuseEffect(() => {\n// \t\tgetCurrentProfile();\n// \tsetFormData({\n//       _id: !film._id ? '' : film._id,\n//       user: !film.user ? '' : film.user,\n//       title: !film.title ? '' : film.title,\n//       cinema: !film.cinema ? '' : film.cinema,\n//       date: !film.date ? '' : film.date,\n//       image: !film.image ? '' : film.image,\n//       ticketPrice: !film.ticketPrice ? '' : film.ticketPrice,\n//       crowdfundTarget: !film.crowdfundTarget ? '' : film.crowdfundTarget,\n//       totalsoFar: !film.totalsoFar ? '' : film.totalsoFar\n//     });\n//   }, [loading, getCurrentProfile]);\n\n// \tlet {\n// \t\t_id,\n// \t\tuser,\n// \t\ttitle,\n// \t\tdate,\n// \t\tcinema,\n// \t\timage,\n// \t\tticketPrice,\n// \t\tcrowdfundTarget,\n// \t\ttotalsoFar\n// \t} = formData;\n\n// \tlet tickets = 0;\n\t\t\t\n// \tconst onChange = e => {\n// \t\t// setFormData({ ...formData, [e.target.name]: e.target.value });\n// \t\ttickets = profile.totalsoFar + parseInt(e.target.value)\n// \t\tsetBookingTotal(parseInt(profile.ticketPrice) * parseInt(e.target.value));\n// \t\tsetFormData({ ...formData, totalsoFar: tickets });\n// \t\t// console.log(bookingTotal)\n// \t}\t\n\t\t\n// \tconst onSubmit = (e, film_id) => {\n// \t\te.preventDefault();\n// \t\t// console.log(film_id)\n// \t\tupdateFilm(formData, history);\n// \t};\n\n// \treturn (\n// \t<div>\n// \t<form>\n// \t<div className='checkout-page how-it-works'>\n// \t\t<div className='checkout-header'>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Film: {profile.title}</span>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Date: {profile.date} </span>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Price: £{profile.ticketPrice} </span>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Crowdfunding Target: {profile.crowdfundTarget} </span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>Tickets sold: {profile.totalsoFar}</span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>{profile._id}</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t\t</div>\n// \t\t</form>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='number'\n// \t\t\t\t\tplaceholder='Enter number of tickets'\n// \t\t\t\t\tname='tickets'\n// \t\t\t\t\tonChange={e => onChange(e)}\n// \t\t\t\t/>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Basket total: £{bookingTotal}</span>\n// \t\t\t</div>\n// \t\t\t<div>\n// \t\t\t<Link className='btn btn-light my-1' to='/dashboard'>Go Back\n// \t\t\t</Link>\n// \t\t\t</div>\n// \t\t\t<div>\n\t\t\n// \t\t\t\t<span \n// \t\t\t\t// movie_id={film}\n// \t\t\t\tonClick={e => onSubmit(e)}>\n// \t\t\t\t\t<StripeCheckoutButton />\n// \t\t\t\t\t}\n// \t\t\t\t</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// };\n\n"]},"metadata":{},"sourceType":"module"}