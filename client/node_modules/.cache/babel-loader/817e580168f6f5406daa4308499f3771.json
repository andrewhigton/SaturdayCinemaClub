{"ast":null,"code":"import _objectSpread from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/booking-page/BookingPage.js\";\n// todo \n//at the moent - trying to get the screen to update with new model\n// 1 enter number of tickets, calculate price,  go to booking payment DONE\n// 2 send new object to createFilm - now can't update, creates new film. \n// separate the creation and update functions DONE\n//need to separete the films and users, and update separately DONE  \n// create tickets, return to dashboard with tickets on dashboard\n// book through landing page, go to a page that tells user your ticket will be sent when film confirmed\n//how to trigger rerender after booking?\n//how to push through payment without auth? trace where this is happening\n// only after loggin in and out are you permitted to buy a ticket??\n// getfilm and getfilms have same outcome, all films.\n// once they book, take user to their dashboard, with tickets and any films created  \n// can only do this with stripe payouts on server \n// 3 update film immediately with new ticket number\n// 4 with two sections, one for films, one for tickets \n// 5 why is bookpage called twice?\n// 6 why can i not navigate between the pages without losing the data?\n// questions\n// how does profile create film in a different channel? GOES THROUGH MODEL PROFILE\n// what is the process via which this happens in films reducer?\n// how does the server file link up to this? \nimport React, { useEffect, useState, Fragment } from 'react';\nimport { useParams } from 'react-router';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Spinner from '../layout/Spinner';\nimport { connect } from 'react-redux';\nimport { getFilmById, updateFilm } from '../../actions/film'; // import { getCurrentProfile, getFilmById } from '../../actions/profile';\n// import { updateFilm } from '../../actions/profile';\n\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button'; //import queryString from 'query-string';\n\nconst CheckoutPage = ({\n  updateFilm,\n  getFilmById,\n  film: {\n    film,\n    loading\n  },\n  match,\n  // profile: { profile, loading },\n  history\n}) => {\n  // useEffect(() => {\n  //    getFilmById(match.params.id);\n  //  }, [getFilmById, match.params.id]);\n  // console.log(film)\n  //console.log(match.params.id);\n  //why does this log 4 times? \n  //and why doesn update not work at route?\n  //go back to the video to work this out. what is req.user.i\n  // console.log(film);\n  const _useState = useState({\n    _id: '',\n    user: '',\n    title: '',\n    date: '',\n    cinema: '',\n    image: '',\n    ticketPrice: '',\n    crowdfundTarget: '',\n    totalsoFar: '' // _id: '',\n    // user: '',\n    // title: '',\n    // date: '',\n    // cinema: '',\n    // image: '',\n    // ticketPrice: '',\n    // crowdfundTarget: '',\n    // totalsoFar: ''\n\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formData = _useState2[0],\n        setFormData = _useState2[1];\n\n  let _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      bookingTotal = _useState4[0],\n      setBookingTotal = _useState4[1]; // remove array brackets\n  // const film = []\n  // getFilm[0]; \n  //console.log(currentFilm)\n  //set booking total cost for live update on screen\n  // this is the problem \n  //this fills initial values, and stops repeated calls to setFormData in useState\n  //const currentFilm = film\t\n  //runs after the render is committed to the screen.\n\n\n  useEffect(() => {\n    getFilmById(match.params.id); //console.log(currentFilm)\n    //this is the problem, but why? \n\n    if (film !== null) {\n      console.log(film);\n      setFormData({\n        // ...state,\n        //   totalsoFar: ''\n        // _id: film._id,\n        // user: film.user,\n        // title: film.title,\n        // cinema: film.cinema,\n        // date: film.date,\n        // image: film.image,\n        // ticketPrice: film.ticketPrice,\n        // crowdfundTarget: film.crowdfundTarget,\n        // totalsoFar: film.totalsoFar\n        //you don't actually need this form for the most part. \n        _id: loading || !film._id ? '' : film._id,\n        user: loading || !film.user ? '' : film.user,\n        title: loading || !film.title ? '' : film.title,\n        cinema: loading || !film.cinema ? '' : film.cinema,\n        date: loading || !film.date ? '' : film.date,\n        image: loading || !film.image ? '' : film.image,\n        ticketPrice: loading || !film.ticketPrice ? '' : film.ticketPrice,\n        crowdfundTarget: loading || !film.crowdfundTarget ? '' : film.crowdfundTarget,\n        totalsoFar: loading || !film.totalsoFar ? '' : film.totalsoFar\n      });\n    }\n  }, []); // console.log(film)\n  //so it's there, it's loaded, so why not showing?\n\n  const _id = formData._id,\n        user = formData.user,\n        title = formData.title,\n        date = formData.date,\n        cinema = formData.cinema,\n        image = formData.image,\n        ticketPrice = formData.ticketPrice,\n        crowdfundTarget = formData.crowdfundTarget,\n        totalsoFar = formData.totalsoFar;\n  let tickets = 0; //the pattern is this.\n  // 1 initiate consts with above\t\t\n  // 2 onchange calls setformdata with values attached\n  // 3 when is setformdata called, interms of being wrapped in useEffect(fetches current film)?\n  // 4 setFormData sets initial state to values.  \n  // 5 so state values are either '', or the value attached to film. which is there. but not getting them \n  // 6 are we reloading film. is that the problem? \n\n  const onChange = e => {\n    console.log(formData); // setFormData({ ...formData, [e.target.name]: e.target.value });\n\n    tickets = film.totalsoFar + parseInt(e.target.value);\n    setBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n    setFormData(_objectSpread({}, formData, {\n      totalsoFar: tickets\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    updateFilm(formData, history);\n  }; //if (film === null) return null;\n\n\n  useEffect(() => {\n    getFilmById(match.params.id); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getFilmById]);\n  return film === null ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"checkout-page how-it-works\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"checkout-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"Film: \", film.title)), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"Date: \", film.date, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Price: \\xA3\", film.ticketPrice, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"Crowdfunding Target: \", film.crowdfundTarget, \" \")), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Tickets sold: \", film.totalsoFar)), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, film._id))))), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"number\",\n    placeholder: \"Enter number of tickets\",\n    name: \"tickets\",\n    onChange: e => onChange(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"header-block\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"Basket total: \\xA3\", bookingTotal)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(Link, {\n    className: \"btn btn-light my-1\",\n    to: \"/dashboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, \"Go Back\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    onClick: e => onSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, React.createElement(StripeCheckoutButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }), \"}\")))) // )}\n  // </Fragment>\t\n  ;\n};\n\nCheckoutPage.propTypes = {\n  updateFilm: PropTypes.func.isRequired,\n  // getCurrentProfile: PropTypes.func.isRequired,\n  getFilmById: PropTypes.func.isRequired,\n  film: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile,\n  film: state.film\n});\n\nexport default connect(mapStateToProps, {\n  updateFilm,\n  getFilmById\n})(withRouter(CheckoutPage)); // <p>Tickets sold: {Object.values(formData)}</p>\n// const CheckoutPage = ({\n// \tupdateFilm,\n// \tgetCurrentProfile,\n// \tprofile: { profile, loading },\n// \thistory, \n// \t// id,\n// }) => {\n// \tconst [formData, setFormData] = useState({\n// \t\t_id: '',\n// \t\tuser: '',\n// \t\ttitle: '',\n// \t\tdate: '',\n// \t\tcinema: '',\n// \t\timage: '',\n// \t\tticketPrice: '',\n// \t\tcrowdfundTarget: '',\n// \t\ttotalsoFar: ''\n// \t}, [setFormData]);\n// \tlet params = useParams();\n// \tconst film = params;\n// \tconst [bookingTotal, setBookingTotal] = useState(0);\n// \t// fills the values with current values\n// \tuseEffect(() => {\n// \t\tgetCurrentProfile();\n// \tsetFormData({\n//       _id: !film._id ? '' : film._id,\n//       user: !film.user ? '' : film.user,\n//       title: !film.title ? '' : film.title,\n//       cinema: !film.cinema ? '' : film.cinema,\n//       date: !film.date ? '' : film.date,\n//       image: !film.image ? '' : film.image,\n//       ticketPrice: !film.ticketPrice ? '' : film.ticketPrice,\n//       crowdfundTarget: !film.crowdfundTarget ? '' : film.crowdfundTarget,\n//       totalsoFar: !film.totalsoFar ? '' : film.totalsoFar\n//     });\n//   }, [loading, getCurrentProfile]);\n// \tlet {\n// \t\t_id,\n// \t\tuser,\n// \t\ttitle,\n// \t\tdate,\n// \t\tcinema,\n// \t\timage,\n// \t\tticketPrice,\n// \t\tcrowdfundTarget,\n// \t\ttotalsoFar\n// \t} = formData;\n// \tlet tickets = 0;\n// \tconst onChange = e => {\n// \t\t// setFormData({ ...formData, [e.target.name]: e.target.value });\n// \t\ttickets = profile.totalsoFar + parseInt(e.target.value)\n// \t\tsetBookingTotal(parseInt(profile.ticketPrice) * parseInt(e.target.value));\n// \t\tsetFormData({ ...formData, totalsoFar: tickets });\n// \t\t// console.log(bookingTotal)\n// \t}\t\n// \tconst onSubmit = (e, film_id) => {\n// \t\te.preventDefault();\n// \t\t// console.log(film_id)\n// \t\tupdateFilm(formData, history);\n// \t};\n// \treturn (\n// \t<div>\n// \t<form>\n// \t<div className='checkout-page how-it-works'>\n// \t\t<div className='checkout-header'>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Film: {profile.title}</span>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Date: {profile.date} </span>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Price: £{profile.ticketPrice} </span>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Crowdfunding Target: {profile.crowdfundTarget} </span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>Tickets sold: {profile.totalsoFar}</span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>{profile._id}</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t\t</div>\n// \t\t</form>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='number'\n// \t\t\t\t\tplaceholder='Enter number of tickets'\n// \t\t\t\t\tname='tickets'\n// \t\t\t\t\tonChange={e => onChange(e)}\n// \t\t\t\t/>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Basket total: £{bookingTotal}</span>\n// \t\t\t</div>\n// \t\t\t<div>\n// \t\t\t<Link className='btn btn-light my-1' to='/dashboard'>Go Back\n// \t\t\t</Link>\n// \t\t\t</div>\n// \t\t\t<div>\n// \t\t\t\t<span \n// \t\t\t\t// movie_id={film}\n// \t\t\t\tonClick={e => onSubmit(e)}>\n// \t\t\t\t\t<StripeCheckoutButton />\n// \t\t\t\t\t}\n// \t\t\t\t</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// };","map":{"version":3,"sources":["/Users/andrewhigton/Documents/mern/SatCinemaClub/client/src/components/booking-page/BookingPage.js"],"names":["React","useEffect","useState","Fragment","useParams","Link","withRouter","Redirect","PropTypes","Spinner","connect","getFilmById","updateFilm","StripeCheckoutButton","CheckoutPage","film","loading","match","history","_id","user","title","date","cinema","image","ticketPrice","crowdfundTarget","totalsoFar","formData","setFormData","bookingTotal","setBookingTotal","params","id","console","log","tickets","onChange","e","parseInt","target","value","onSubmit","preventDefault","propTypes","func","isRequired","object","profile","mapStateToProps","state"],"mappings":"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":["// todo \n//at the moent - trying to get the screen to update with new model\n// 1 enter number of tickets, calculate price,  go to booking payment DONE\n// 2 send new object to createFilm - now can't update, creates new film. \n\t// separate the creation and update functions DONE\n\t//need to separete the films and users, and update separately DONE  \n\t// create tickets, return to dashboard with tickets on dashboard\n\n// book through landing page, go to a page that tells user your ticket will be sent when film confirmed\n//how to trigger rerender after booking?\n//how to push through payment without auth? trace where this is happening\n// only after loggin in and out are you permitted to buy a ticket??\n// getfilm and getfilms have same outcome, all films.\n\n// once they book, take user to their dashboard, with tickets and any films created  \n// can only do this with stripe payouts on server \n// 3 update film immediately with new ticket number\n// 4 with two sections, one for films, one for tickets \n// 5 why is bookpage called twice?\n// 6 why can i not navigate between the pages without losing the data?\n\n\n// questions\n// how does profile create film in a different channel? GOES THROUGH MODEL PROFILE\n// what is the process via which this happens in films reducer?\n// how does the server file link up to this? \n\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { useParams} from 'react-router';\nimport { Link, withRouter, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Spinner from '../layout/Spinner';\nimport { connect } from 'react-redux';\nimport { getFilmById, updateFilm } from '../../actions/film';\n// import { getCurrentProfile, getFilmById } from '../../actions/profile';\n\n// import { updateFilm } from '../../actions/profile';\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button';\n//import queryString from 'query-string';\n\nconst CheckoutPage = ({\n\t\n\tupdateFilm,\n\tgetFilmById,\n\tfilm: {film, loading},\n\tmatch,\n\t// profile: { profile, loading },\n\thistory\n}) => {\n\t// useEffect(() => {\n //    getFilmById(match.params.id);\n //  }, [getFilmById, match.params.id]);\n\t// console.log(film)\n\t//console.log(match.params.id);\n\t//why does this log 4 times? \n\t//and why doesn update not work at route?\n\t//go back to the video to work this out. what is req.user.i\n\t// console.log(film);\n\tconst [formData, setFormData] = useState({\n\t\t_id: '',\n\t\tuser: '',\n\t\ttitle: '',\n\t\tdate: '',\n\t\tcinema: '',\n\t\timage: '',\n\t\tticketPrice: '',\n\t\tcrowdfundTarget: '',\n\t\ttotalsoFar: ''\n\t\t// _id: '',\n\t\t// user: '',\n\t\t// title: '',\n\t\t// date: '',\n\t\t// cinema: '',\n\t\t// image: '',\n\t\t// ticketPrice: '',\n\t\t// crowdfundTarget: '',\n\t\t// totalsoFar: ''\n\t});\n\n\tlet [bookingTotal, setBookingTotal] = useState(0);\n\t// remove array brackets\n\t// const film = []\n\t// getFilm[0]; \n\t//console.log(currentFilm)\n\t//set booking total cost for live update on screen\n\t\n\t// this is the problem \n\t//this fills initial values, and stops repeated calls to setFormData in useState\n//const currentFilm = film\t\n//runs after the render is committed to the screen.\n\tuseEffect(() => {\n\t\tgetFilmById(match.params.id)\n\t\t//console.log(currentFilm)\n\t//this is the problem, but why? \n\tif(film !== null) {   \n\tconsole.log(film)\n\tsetFormData({\n      // ...state,\n      //   totalsoFar: ''\n      // _id: film._id,\n      // user: film.user,\n      // title: film.title,\n      // cinema: film.cinema,\n      // date: film.date,\n      // image: film.image,\n      // ticketPrice: film.ticketPrice,\n      // crowdfundTarget: film.crowdfundTarget,\n      // totalsoFar: film.totalsoFar\n      //you don't actually need this form for the most part. \n      _id: loading || !film._id ? '' : film._id,\n      user: loading || !film.user ? '' : film.user,\n      title: loading || !film.title ? '' : film.title,\n      cinema: loading || !film.cinema ? '' : film.cinema,\n      date: loading || !film.date ? '' : film.date,\n      image: loading || !film.image ? '' : film.image,\n      ticketPrice: loading || !film.ticketPrice ? '' : film.ticketPrice,\n      crowdfundTarget: loading || !film.crowdfundTarget ? '' : film.crowdfundTarget,\n      totalsoFar: loading || !film.totalsoFar ? '' : film.totalsoFar\n    \t\t});\n\t\t\t \t}\n   }, []);\n\t// console.log(film)\n\t\n\t\n\t//so it's there, it's loaded, so why not showing?\n\tconst {\n\t\t_id,\n\t\tuser,\n\t\ttitle,\n\t\tdate,\n\t\tcinema,\n\t\timage,\n\t\tticketPrice,\n\t\tcrowdfundTarget,\n\t\ttotalsoFar\n\t} = formData;\n\n\tlet tickets = 0;\n\t\t\t\n\n\t//the pattern is this.\n\t// 1 initiate consts with above\t\t\n\t// 2 onchange calls setformdata with values attached\n\t// 3 when is setformdata called, interms of being wrapped in useEffect(fetches current film)?\n\t// 4 setFormData sets initial state to values.  \n\t// 5 so state values are either '', or the value attached to film. which is there. but not getting them \n\t// 6 are we reloading film. is that the problem? \n\n\tconst onChange = e => {\n\t\tconsole.log(formData)\n\t\t// setFormData({ ...formData, [e.target.name]: e.target.value });\n\t\ttickets = film.totalsoFar + parseInt(e.target.value)\n\t\tsetBookingTotal(parseInt(film.ticketPrice) * parseInt(e.target.value));\n\t\tsetFormData({ ...formData, totalsoFar: tickets });\n\t}\t\n\t\t\n\tconst onSubmit = (e) => {\n\t\te.preventDefault();\n\t\tupdateFilm(formData, history);\n\t};\n\t\n\t//if (film === null) return null;\n\tuseEffect(() => {\n\t\tgetFilmById(match.params.id)\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [getFilmById]);\n\treturn film === null ? (\n\t\t\t\t\t<Spinner />\t\n\t\t\t   ) : (\n\t\t\t    \t<Fragment>  \n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t<div className='checkout-page how-it-works'>\n\t\t\t\t\t\t\t\t\t<div className='checkout-header'>\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Film: {film.title}</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Date: {film.date} </span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Price: £{film.ticketPrice} </span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Crowdfunding Target: {film.crowdfundTarget} </span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div \n\t\t\t\t\t\t\t\t\t\tclassName='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Tickets sold: {film.totalsoFar}</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div \n\t\t\t\t\t\t\t\t\t\tclassName='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>{film._id}</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter number of tickets'\n\t\t\t\t\t\t\t\t\t\t\t\tname='tickets'\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={e => onChange(e)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className='header-block'>\n\t\t\t\t\t\t\t\t\t\t\t<span>Basket total: £{bookingTotal}</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<Link className='btn btn-light my-1' to='/dashboard'>Go Back\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t<span onClick={e => onSubmit(e)}> \n\t\t\t\t\t\t\t\t\t\t\t\t<StripeCheckoutButton />\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t\t// )}\n\t    // </Fragment>\t\n\t\t);\n\t};\n\n\nCheckoutPage.propTypes = {\n\tupdateFilm: PropTypes.func.isRequired,\n\t// getCurrentProfile: PropTypes.func.isRequired,\n\tgetFilmById: PropTypes.func.isRequired,\n\tfilm: PropTypes.object.isRequired,\n\tprofile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n\tprofile: state.profile,\n\tfilm: state.film\n});\n\nexport default connect(mapStateToProps, { updateFilm, getFilmById })(\n\twithRouter(CheckoutPage)\n);\n\n// <p>Tickets sold: {Object.values(formData)}</p>\n\t\n\n// const CheckoutPage = ({\n// \tupdateFilm,\n// \tgetCurrentProfile,\n// \tprofile: { profile, loading },\n// \thistory, \n// \t// id,\n// }) => {\n// \tconst [formData, setFormData] = useState({\n// \t\t_id: '',\n// \t\tuser: '',\n// \t\ttitle: '',\n// \t\tdate: '',\n// \t\tcinema: '',\n// \t\timage: '',\n// \t\tticketPrice: '',\n// \t\tcrowdfundTarget: '',\n// \t\ttotalsoFar: ''\n// \t}, [setFormData]);\n\n// \tlet params = useParams();\n// \tconst film = params;\n\t\n// \tconst [bookingTotal, setBookingTotal] = useState(0);\n\t\n// \t// fills the values with current values\n\t\n// \tuseEffect(() => {\n// \t\tgetCurrentProfile();\n// \tsetFormData({\n//       _id: !film._id ? '' : film._id,\n//       user: !film.user ? '' : film.user,\n//       title: !film.title ? '' : film.title,\n//       cinema: !film.cinema ? '' : film.cinema,\n//       date: !film.date ? '' : film.date,\n//       image: !film.image ? '' : film.image,\n//       ticketPrice: !film.ticketPrice ? '' : film.ticketPrice,\n//       crowdfundTarget: !film.crowdfundTarget ? '' : film.crowdfundTarget,\n//       totalsoFar: !film.totalsoFar ? '' : film.totalsoFar\n//     });\n//   }, [loading, getCurrentProfile]);\n\n// \tlet {\n// \t\t_id,\n// \t\tuser,\n// \t\ttitle,\n// \t\tdate,\n// \t\tcinema,\n// \t\timage,\n// \t\tticketPrice,\n// \t\tcrowdfundTarget,\n// \t\ttotalsoFar\n// \t} = formData;\n\n// \tlet tickets = 0;\n\t\t\t\n// \tconst onChange = e => {\n// \t\t// setFormData({ ...formData, [e.target.name]: e.target.value });\n// \t\ttickets = profile.totalsoFar + parseInt(e.target.value)\n// \t\tsetBookingTotal(parseInt(profile.ticketPrice) * parseInt(e.target.value));\n// \t\tsetFormData({ ...formData, totalsoFar: tickets });\n// \t\t// console.log(bookingTotal)\n// \t}\t\n\t\t\n// \tconst onSubmit = (e, film_id) => {\n// \t\te.preventDefault();\n// \t\t// console.log(film_id)\n// \t\tupdateFilm(formData, history);\n// \t};\n\n// \treturn (\n// \t<div>\n// \t<form>\n// \t<div className='checkout-page how-it-works'>\n// \t\t<div className='checkout-header'>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Film: {profile.title}</span>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Date: {profile.date} </span>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Price: £{profile.ticketPrice} </span>\n// \t\t\t</div>\n\t\t\t\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Crowdfunding Target: {profile.crowdfundTarget} </span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>Tickets sold: {profile.totalsoFar}</span>\n// \t\t\t</div>\n// \t\t\t<div \n// \t\t\tclassName='header-block'>\n// \t\t\t\t<span>{profile._id}</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t\t</div>\n// \t\t</form>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<input\n// \t\t\t\t\ttype='number'\n// \t\t\t\t\tplaceholder='Enter number of tickets'\n// \t\t\t\t\tname='tickets'\n// \t\t\t\t\tonChange={e => onChange(e)}\n// \t\t\t\t/>\n// \t\t\t</div>\n// \t\t\t<div className='header-block'>\n// \t\t\t\t<span>Basket total: £{bookingTotal}</span>\n// \t\t\t</div>\n// \t\t\t<div>\n// \t\t\t<Link className='btn btn-light my-1' to='/dashboard'>Go Back\n// \t\t\t</Link>\n// \t\t\t</div>\n// \t\t\t<div>\n\t\t\n// \t\t\t\t<span \n// \t\t\t\t// movie_id={film}\n// \t\t\t\tonClick={e => onSubmit(e)}>\n// \t\t\t\t\t<StripeCheckoutButton />\n// \t\t\t\t\t}\n// \t\t\t\t</span>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// };\n\n"]},"metadata":{},"sourceType":"module"}